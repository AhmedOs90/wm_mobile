// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppControllerGetRootData, AppControllerGetRootResponses, AppControllerGetHealthData, AppControllerGetHealthResponses, AppControllerGetHealthErrors, AppControllerEmployerData, AppControllerEmployerResponses, AppControllerCandidateData, AppControllerCandidateResponses, AppControllerGetErrorData, AppControllerGetErrorResponses, AppControllerGetAsyncErrorData, AppControllerGetAsyncErrorResponses, AppControllerGetCustomMessageData, AppControllerGetCustomMessageResponses, AppControllerGetUserContextErrorData, AppControllerGetUserContextErrorResponses, AppControllerGetSimpleErrorData, AppControllerGetSimpleErrorResponses, AppControllerGetCustomErrorsData, AppControllerGetCustomErrorsResponses, AuthControllerGetProfileData, AuthControllerGetProfileResponses, AuthControllerGetProfileErrors, AuthControllerLoginData, AuthControllerLoginResponses, AuthControllerLoginErrors, AuthControllerRegisterData, AuthControllerRegisterResponses, AuthControllerRegisterErrors, AuthControllerActivateData, AuthControllerActivateResponses, AuthControllerActivateErrors, AuthControllerForgetPasswordData, AuthControllerForgetPasswordResponses, AuthControllerForgetPasswordErrors, AuthControllerResetPasswordData, AuthControllerResetPasswordResponses, AuthControllerResetPasswordErrors, AuthControllerUpdateEmailData, AuthControllerUpdateEmailResponses, AuthControllerUpdateEmailErrors, AuthControllerUpdatePasswordData, AuthControllerUpdatePasswordResponses, AuthControllerUpdatePasswordErrors, AuthControllerDeactivateAccountData, AuthControllerDeactivateAccountResponses, AuthControllerDeactivateAccountErrors, AuthControllerLinkedinAuthData, AuthControllerLinkedinAuthResponses, AuthControllerLinkedinAuthRedirectData, AuthControllerLinkedinAuthRedirectResponses, AuthControllerGoogleAuthData, AuthControllerGoogleAuthResponses, AuthControllerGoogleAuthRedirectData, AuthControllerGoogleAuthRedirectResponses, CandidatesControllerGetCandidateStatisticsData, CandidatesControllerGetCandidateStatisticsResponses, CandidatesControllerGetCandidateStatisticsErrors, CandidatesControllerGetPersonalInfoData, CandidatesControllerGetPersonalInfoResponses, CandidatesControllerGetPersonalInfoErrors, CandidatesControllerUpdatePersonalInfoData, CandidatesControllerUpdatePersonalInfoResponses, CandidatesControllerUpdatePersonalInfoErrors, CandidatesControllerGetProfileCompletionScoreData, CandidatesControllerGetProfileCompletionScoreResponses, CandidatesControllerGetProfileCompletionScoreErrors, CandidatesControllerGetLanguagesData, CandidatesControllerGetLanguagesResponses, CandidatesControllerGetLanguagesErrors, CandidatesControllerAddLanguageData, CandidatesControllerAddLanguageResponses, CandidatesControllerAddLanguageErrors, CandidatesControllerRemoveLanguageData, CandidatesControllerRemoveLanguageResponses, CandidatesControllerRemoveLanguageErrors, CandidatesControllerApplyToJobData, CandidatesControllerApplyToJobResponses, CandidatesControllerApplyToJobErrors, CandidatesControllerGetDashboardSummaryData, CandidatesControllerGetDashboardSummaryResponses, CandidatesControllerGetDashboardSummaryErrors, CandidatesControllerGetProfileStatsData, CandidatesControllerGetProfileStatsResponses, CandidatesControllerGetProfileStatsErrors, CandidateExperiencesControllerFindAllData, CandidateExperiencesControllerFindAllResponses, CandidateExperiencesControllerFindAllErrors, CandidateExperiencesControllerCreateData, CandidateExperiencesControllerCreateResponses, CandidateExperiencesControllerCreateErrors, CandidateExperiencesControllerRemoveData, CandidateExperiencesControllerRemoveResponses, CandidateExperiencesControllerRemoveErrors, CandidateExperiencesControllerFindByIdData, CandidateExperiencesControllerFindByIdResponses, CandidateExperiencesControllerFindByIdErrors, CandidateExperiencesControllerUpdateData, CandidateExperiencesControllerUpdateResponses, CandidateExperiencesControllerUpdateErrors, CandidateEducationsControllerFindAllData, CandidateEducationsControllerFindAllResponses, CandidateEducationsControllerFindAllErrors, CandidateEducationsControllerCreateData, CandidateEducationsControllerCreateResponses, CandidateEducationsControllerCreateErrors, CandidateEducationsControllerRemoveData, CandidateEducationsControllerRemoveResponses, CandidateEducationsControllerRemoveErrors, CandidateEducationsControllerFindOneData, CandidateEducationsControllerFindOneResponses, CandidateEducationsControllerFindOneErrors, CandidateEducationsControllerUpdateData, CandidateEducationsControllerUpdateResponses, CandidateEducationsControllerUpdateErrors, CandidateSkillsControllerFindAllData, CandidateSkillsControllerFindAllResponses, CandidateSkillsControllerFindAllErrors, CandidateSkillsControllerCreateData, CandidateSkillsControllerCreateResponses, CandidateSkillsControllerCreateErrors, CandidateSkillsControllerRemoveData, CandidateSkillsControllerRemoveResponses, CandidateSkillsControllerRemoveErrors, CandidateSkillsControllerUpdateData, CandidateSkillsControllerUpdateResponses, CandidateSkillsControllerUpdateErrors, CandidateProjectsControllerFindAllData, CandidateProjectsControllerFindAllResponses, CandidateProjectsControllerFindAllErrors, CandidateProjectsControllerCreateData, CandidateProjectsControllerCreateResponses, CandidateProjectsControllerCreateErrors, CandidateProjectsControllerRemoveData, CandidateProjectsControllerRemoveResponses, CandidateProjectsControllerRemoveErrors, CandidateProjectsControllerFindOneData, CandidateProjectsControllerFindOneResponses, CandidateProjectsControllerFindOneErrors, CandidateProjectsControllerUpdateData, CandidateProjectsControllerUpdateResponses, CandidateProjectsControllerUpdateErrors, CandidateJobsControllerFindAllData, CandidateJobsControllerFindAllResponses, CandidateJobsControllerFindAllErrors, CandidateJobsControllerGetFavouriteData, CandidateJobsControllerGetFavouriteResponses, CandidateJobsControllerGetFavouriteErrors, CandidateJobsControllerGetSimilarJobsData, CandidateJobsControllerGetSimilarJobsResponses, CandidateJobsControllerGetSimilarJobsErrors, CandidateJobsControllerSaveJobData, CandidateJobsControllerSaveJobResponses, CandidateJobsControllerSaveJobErrors, CandidateJobsControllerGetJobDetailsData, CandidateJobsControllerGetJobDetailsResponses, CandidateJobsControllerGetJobDetailsErrors, FollowingsControllerGetFavouriteData, FollowingsControllerGetFavouriteResponses, FollowingsControllerGetFavouriteErrors, CvsControllerFindAllData, CvsControllerFindAllResponses, CvsControllerFindAllErrors, CvsControllerCreateData, CvsControllerCreateResponses, CvsControllerCreateErrors, CvsControllerGetCountData, CvsControllerGetCountResponses, CvsControllerGetCountErrors, CvsControllerRemoveData, CvsControllerRemoveResponses, CvsControllerRemoveErrors, CandidateNotificationsControllerFindData, CandidateNotificationsControllerFindResponses, CandidateNotificationsControllerFindErrors, CandidateNotificationsControllerCreateData, CandidateNotificationsControllerCreateResponses, CandidateNotificationsControllerCreateErrors, CandidateCareerInfoControllerFindData, CandidateCareerInfoControllerFindResponses, CandidateCareerInfoControllerFindErrors, CandidateCareerInfoControllerCreateData, CandidateCareerInfoControllerCreateResponses, CandidateCareerInfoControllerCreateErrors, JobsControllerGetRecommendedJobsData, JobsControllerGetRecommendedJobsResponses, JobsControllerGetRecommendedJobsErrors, JobsControllerGetJobsData, JobsControllerGetJobsResponses, JobsControllerGetJobsErrors, JobsControllerGetTrendingJobsData, JobsControllerGetTrendingJobsResponses, StaticDataControllerGetCountriesData, StaticDataControllerGetCountriesResponses, StaticDataControllerGetCountriesErrors, StaticDataControllerGetCountriesWithQueryData, StaticDataControllerGetCountriesWithQueryResponses, StaticDataControllerGetCountriesWithQueryErrors, StaticDataControllerGetStatesByCountryIdData, StaticDataControllerGetStatesByCountryIdResponses, StaticDataControllerGetStatesByCountryIdErrors, StaticDataControllerGetCitiesByStateIdData, StaticDataControllerGetCitiesByStateIdResponses, StaticDataControllerGetCitiesByStateIdErrors, StaticDataControllerGetCategoriesData, StaticDataControllerGetCategoriesResponses, StaticDataControllerGetCategoriesErrors, StaticDataControllerGetFunctionalAreasData, StaticDataControllerGetFunctionalAreasResponses, StaticDataControllerGetFunctionalAreasErrors, StaticDataControllerGetFunctionalAreasWithQueryData, StaticDataControllerGetFunctionalAreasWithQueryResponses, StaticDataControllerGetFunctionalAreasWithQueryErrors, StaticDataControllerGetJobTypesData, StaticDataControllerGetJobTypesResponses, StaticDataControllerGetJobTypesErrors, StaticDataControllerFindAllDegreeLevelsData, StaticDataControllerFindAllDegreeLevelsResponses, StaticDataControllerFindAllDegreeLevelsErrors, StaticDataControllerGetDegreeTypesData, StaticDataControllerGetDegreeTypesResponses, StaticDataControllerGetDegreeTypesErrors, StaticDataControllerGetSkillsData, StaticDataControllerGetSkillsResponses, StaticDataControllerGetSkillsErrors, StaticDataControllerGetGendersData, StaticDataControllerGetGendersResponses, StaticDataControllerGetGendersErrors, StaticDataControllerGetMaritalStatusesData, StaticDataControllerGetMaritalStatusesResponses, StaticDataControllerGetMaritalStatusesErrors, StaticDataControllerGetMilitaryStatusesData, StaticDataControllerGetMilitaryStatusesResponses, StaticDataControllerGetMilitaryStatusesErrors, StaticDataControllerGetCareerLevelsData, StaticDataControllerGetCareerLevelsResponses, StaticDataControllerGetCareerLevelsErrors, StaticDataControllerGetCurrenciesData, StaticDataControllerGetCurrenciesResponses, StaticDataControllerGetCurrenciesErrors, StaticDataControllerGetSiteSettingsData, StaticDataControllerGetSiteSettingsResponses, StaticDataControllerGetSiteSettingsErrors, StaticDataControllerGetIndustriesData, StaticDataControllerGetIndustriesResponses, StaticDataControllerGetIndustriesErrors, StaticDataControllerGetOwnershipTypesData, StaticDataControllerGetOwnershipTypesResponses, StaticDataControllerGetOwnershipTypesErrors, StaticDataControllerGetPlansData, StaticDataControllerGetPlansResponses, StaticDataControllerGetPlansErrors, CompaniesControllerSearchByKeywordData, CompaniesControllerSearchByKeywordResponses, CompaniesControllerSearchByKeywordErrors, CompaniesControllerGetCompanyJobsData, CompaniesControllerGetCompanyJobsResponses, CompaniesControllerGetCompanyJobsErrors, CompaniesControllerCreateData, CompaniesControllerCreateResponses, CompaniesControllerCreateErrors, CompaniesControllerUpdateData, CompaniesControllerUpdateResponses, CompaniesControllerUpdateErrors, CompaniesControllerGetBySlugData, CompaniesControllerGetBySlugResponses, CompaniesControllerGetBySlugErrors, CompaniesControllerGetCompaniesWithPaginationData, CompaniesControllerGetCompaniesWithPaginationResponses, CompaniesControllerGetCompaniesWithPaginationErrors, EmployerJobsControllerGetAllData, EmployerJobsControllerGetAllResponses, EmployerJobsControllerCreateData, EmployerJobsControllerCreateResponses, EmployerJobsControllerDeleteData, EmployerJobsControllerDeleteResponses, EmployerJobsControllerGetOneData, EmployerJobsControllerGetOneResponses, EmployerJobsControllerUpdateData, EmployerJobsControllerUpdateResponses, AdminControllerGetAdminDashboardData, AdminControllerGetAdminDashboardResponses, AdminControllerGetAdminDashboardErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetRoot = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetRootResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Checks database connectivity and returns appropriate HTTP status
 */
export const appControllerGetHealth = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHealthResponses, AppControllerGetHealthErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};

export const appControllerEmployer = <ThrowOnError extends boolean = false>(options?: Options<AppControllerEmployerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerEmployerResponses, unknown, ThrowOnError>({
        url: '/employer',
        ...options
    });
};

export const appControllerCandidate = <ThrowOnError extends boolean = false>(options?: Options<AppControllerCandidateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerCandidateResponses, unknown, ThrowOnError>({
        url: '/candidate',
        ...options
    });
};

export const appControllerGetError = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetErrorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetErrorResponses, unknown, ThrowOnError>({
        url: '/debug-sentry',
        ...options
    });
};

export const appControllerGetAsyncError = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetAsyncErrorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetAsyncErrorResponses, unknown, ThrowOnError>({
        url: '/debug-sentry/async-error',
        ...options
    });
};

export const appControllerGetCustomMessage = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetCustomMessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetCustomMessageResponses, unknown, ThrowOnError>({
        url: '/debug-sentry/custom-message',
        ...options
    });
};

export const appControllerGetUserContextError = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetUserContextErrorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetUserContextErrorResponses, unknown, ThrowOnError>({
        url: '/debug-sentry/user-context',
        ...options
    });
};

export const appControllerGetSimpleError = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetSimpleErrorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetSimpleErrorResponses, unknown, ThrowOnError>({
        url: '/debug-sentry/simple',
        ...options
    });
};

export const appControllerGetCustomErrors = <ThrowOnError extends boolean = false>(options: Options<AppControllerGetCustomErrorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppControllerGetCustomErrorsResponses, unknown, ThrowOnError>({
        url: '/debug-sentry/custom-errors',
        ...options
    });
};

/**
 * Get Current Authenticated User
 * Returns the current user based on the JWT token
 */
export const authControllerGetProfile = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerGetProfileResponses, AuthControllerGetProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

/**
 * Login
 * Authenticates user and returns access token
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerLoginResponses, AuthControllerLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register User
 * Registers a new user and sends OTP for verification.
 */
export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRegisterResponses, AuthControllerRegisterErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate User
 * Activates a user account using either token or OTP.
 */
export const authControllerActivate = <ThrowOnError extends boolean = false>(options: Options<AuthControllerActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerActivateResponses, AuthControllerActivateErrors, ThrowOnError>({
        url: '/auth/activate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request Password Reset
 * Sends a password reset link to the user's registered email.
 */
export const authControllerForgetPassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerForgetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerForgetPasswordResponses, AuthControllerForgetPasswordErrors, ThrowOnError>({
        url: '/auth/forget-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset Password
 * Resets user password using the token from password reset email.
 */
export const authControllerResetPassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerResetPasswordResponses, AuthControllerResetPasswordErrors, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Email
 * Update logged-in user email address.
 */
export const authControllerUpdateEmail = <ThrowOnError extends boolean = false>(options: Options<AuthControllerUpdateEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AuthControllerUpdateEmailResponses, AuthControllerUpdateEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/update-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Password
 * Update logged-in user password.
 */
export const authControllerUpdatePassword = <ThrowOnError extends boolean = false>(options: Options<AuthControllerUpdatePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AuthControllerUpdatePasswordResponses, AuthControllerUpdatePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/update-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deactivate Account
 * Deactivate logged-in user account.
 */
export const authControllerDeactivateAccount = <ThrowOnError extends boolean = false>(options: Options<AuthControllerDeactivateAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AuthControllerDeactivateAccountResponses, AuthControllerDeactivateAccountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/deactivate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initiate LinkedIn OAuth login
 * Redirects the user to LinkedIn OAuth login.
 */
export const authControllerLinkedinAuth = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLinkedinAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerLinkedinAuthResponses, unknown, ThrowOnError>({
        url: '/auth/linkedin',
        ...options
    });
};

/**
 * Handle LinkedIn OAuth redirect
 * Callback endpoint for LinkedIn OAuth. Redirects back to the frontend with a token or error message.
 */
export const authControllerLinkedinAuthRedirect = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLinkedinAuthRedirectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerLinkedinAuthRedirectResponses, unknown, ThrowOnError>({
        url: '/auth/linkedin/callback',
        ...options
    });
};

/**
 * Initiate Google OAuth
 * Redirects the user to Google OAuth. Pass userType and type query parameters to specify role and flow type.
 */
export const authControllerGoogleAuth = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGoogleAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerGoogleAuthResponses, unknown, ThrowOnError>({
        url: '/auth/google',
        ...options
    });
};

/**
 * Handle Google OAuth redirect
 * Callback endpoint for Google OAuth. Redirects back to the frontend with a token or error message.
 */
export const authControllerGoogleAuthRedirect = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGoogleAuthRedirectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthControllerGoogleAuthRedirectResponses, unknown, ThrowOnError>({
        url: '/auth/google/callback',
        ...options
    });
};

/**
 * Get Candidate Statistics information including Profile Views, Followed Companies, Job Applications and Shortlisted Jobs count.
 */
export const candidatesControllerGetCandidateStatistics = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetCandidateStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetCandidateStatisticsResponses, CandidatesControllerGetCandidateStatisticsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/statistics',
        ...options
    });
};

/**
 * Get personal info of the logged-in candidate
 */
export const candidatesControllerGetPersonalInfo = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetPersonalInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetPersonalInfoResponses, CandidatesControllerGetPersonalInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/info',
        ...options
    });
};

/**
 * Update personal info of the logged-in candidate
 */
export const candidatesControllerUpdatePersonalInfo = <ThrowOnError extends boolean = false>(options: Options<CandidatesControllerUpdatePersonalInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CandidatesControllerUpdatePersonalInfoResponses, CandidatesControllerUpdatePersonalInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get profile completion score percentage
 */
export const candidatesControllerGetProfileCompletionScore = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetProfileCompletionScoreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetProfileCompletionScoreResponses, CandidatesControllerGetProfileCompletionScoreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/completion-score',
        ...options
    });
};

/**
 * Get candidate languages
 */
export const candidatesControllerGetLanguages = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetLanguagesResponses, CandidatesControllerGetLanguagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/languages',
        ...options
    });
};

/**
 * Add language to candidate profile
 */
export const candidatesControllerAddLanguage = <ThrowOnError extends boolean = false>(options: Options<CandidatesControllerAddLanguageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidatesControllerAddLanguageResponses, CandidatesControllerAddLanguageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/languages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove language from candidate profile
 */
export const candidatesControllerRemoveLanguage = <ThrowOnError extends boolean = false>(options: Options<CandidatesControllerRemoveLanguageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CandidatesControllerRemoveLanguageResponses, CandidatesControllerRemoveLanguageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/languages/{language}',
        ...options
    });
};

/**
 * Apply to job
 */
export const candidatesControllerApplyToJob = <ThrowOnError extends boolean = false>(options: Options<CandidatesControllerApplyToJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidatesControllerApplyToJobResponses, CandidatesControllerApplyToJobErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/apply',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get candidate dashboard summary with metrics and recommendations
 * Retrieves dashboard summary including application count, saved jobs, profile views, completion status, and job recommendations
 */
export const candidatesControllerGetDashboardSummary = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetDashboardSummaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetDashboardSummaryResponses, CandidatesControllerGetDashboardSummaryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/dashboard-summary',
        ...options
    });
};

/**
 * Retrieves aggregated statistics for the candidate profile including counts of applications, skills, education entries, and work experience
 * Get candidate profile statistics
 */
export const candidatesControllerGetProfileStats = <ThrowOnError extends boolean = false>(options?: Options<CandidatesControllerGetProfileStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidatesControllerGetProfileStatsResponses, CandidatesControllerGetProfileStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/profile-stats',
        ...options
    });
};

/**
 * Get all user experiences of the current user
 */
export const candidateExperiencesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CandidateExperiencesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateExperiencesControllerFindAllResponses, CandidateExperiencesControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/experiences',
        ...options
    });
};

/**
 * Create a new user experience
 */
export const candidateExperiencesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateExperiencesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateExperiencesControllerCreateResponses, CandidateExperiencesControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/experiences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an user experience by ID
 */
export const candidateExperiencesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CandidateExperiencesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CandidateExperiencesControllerRemoveResponses, CandidateExperiencesControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/experiences/{id}',
        ...options
    });
};

/**
 * Get user experience by ID
 */
export const candidateExperiencesControllerFindById = <ThrowOnError extends boolean = false>(options: Options<CandidateExperiencesControllerFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateExperiencesControllerFindByIdResponses, CandidateExperiencesControllerFindByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/experiences/{id}',
        ...options
    });
};

/**
 * Update an existing user experience
 */
export const candidateExperiencesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CandidateExperiencesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CandidateExperiencesControllerUpdateResponses, CandidateExperiencesControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/experiences/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all educations for the logged-in candidate
 */
export const candidateEducationsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CandidateEducationsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateEducationsControllerFindAllResponses, CandidateEducationsControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/educations',
        ...options
    });
};

/**
 * Create a new education
 */
export const candidateEducationsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateEducationsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateEducationsControllerCreateResponses, CandidateEducationsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/educations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an education by ID
 */
export const candidateEducationsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CandidateEducationsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CandidateEducationsControllerRemoveResponses, CandidateEducationsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/educations/{id}',
        ...options
    });
};

/**
 * Get a single education by ID
 */
export const candidateEducationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CandidateEducationsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateEducationsControllerFindOneResponses, CandidateEducationsControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/educations/{id}',
        ...options
    });
};

/**
 * Update an existing education
 */
export const candidateEducationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CandidateEducationsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CandidateEducationsControllerUpdateResponses, CandidateEducationsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/educations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all candidate skills
 */
export const candidateSkillsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CandidateSkillsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateSkillsControllerFindAllResponses, CandidateSkillsControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/skills',
        ...options
    });
};

/**
 * Create a new candidate skill
 */
export const candidateSkillsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateSkillsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateSkillsControllerCreateResponses, CandidateSkillsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/skills',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a candidate skill by ID
 */
export const candidateSkillsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CandidateSkillsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CandidateSkillsControllerRemoveResponses, CandidateSkillsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/skills/{id}',
        ...options
    });
};

/**
 * Update existing candidate skill
 */
export const candidateSkillsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CandidateSkillsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CandidateSkillsControllerUpdateResponses, CandidateSkillsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/skills/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all candidate projects
 */
export const candidateProjectsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CandidateProjectsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateProjectsControllerFindAllResponses, CandidateProjectsControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/projects',
        ...options
    });
};

/**
 * Create new project
 */
export const candidateProjectsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateProjectsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateProjectsControllerCreateResponses, CandidateProjectsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete project by ID
 */
export const candidateProjectsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CandidateProjectsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CandidateProjectsControllerRemoveResponses, CandidateProjectsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/projects/{id}',
        ...options
    });
};

/**
 * Get project by ID
 */
export const candidateProjectsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CandidateProjectsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateProjectsControllerFindOneResponses, CandidateProjectsControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/projects/{id}',
        ...options
    });
};

/**
 * Update project by ID
 */
export const candidateProjectsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CandidateProjectsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CandidateProjectsControllerUpdateResponses, CandidateProjectsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/projects/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get list of all candidate's job applications by status and other filters.
 */
export const candidateJobsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<CandidateJobsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateJobsControllerFindAllResponses, CandidateJobsControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/jobs/applications',
        ...options
    });
};

/**
 * Get list of all candidate's favourite / saved jobs.
 */
export const candidateJobsControllerGetFavourite = <ThrowOnError extends boolean = false>(options: Options<CandidateJobsControllerGetFavouriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateJobsControllerGetFavouriteResponses, CandidateJobsControllerGetFavouriteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/jobs/favourite',
        ...options
    });
};

/**
 * Get jobs by job ID and skill IDs
 */
export const candidateJobsControllerGetSimilarJobs = <ThrowOnError extends boolean = false>(options: Options<CandidateJobsControllerGetSimilarJobsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateJobsControllerGetSimilarJobsResponses, CandidateJobsControllerGetSimilarJobsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/jobs/similar',
        ...options
    });
};

/**
 * save a job to favourites
 */
export const candidateJobsControllerSaveJob = <ThrowOnError extends boolean = false>(options: Options<CandidateJobsControllerSaveJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateJobsControllerSaveJobResponses, CandidateJobsControllerSaveJobErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/jobs/save',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * get job details by id for candidates
 */
export const candidateJobsControllerGetJobDetails = <ThrowOnError extends boolean = false>(options: Options<CandidateJobsControllerGetJobDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CandidateJobsControllerGetJobDetailsResponses, CandidateJobsControllerGetJobDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/jobs/{jobId}',
        ...options
    });
};

/**
 * Get list of all candidate's favourite companies.
 */
export const followingsControllerGetFavourite = <ThrowOnError extends boolean = false>(options?: Options<FollowingsControllerGetFavouriteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FollowingsControllerGetFavouriteResponses, FollowingsControllerGetFavouriteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/followings',
        ...options
    });
};

/**
 * Get all cvs for the logged-in candidate
 */
export const cvsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CvsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CvsControllerFindAllResponses, CvsControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/cvs',
        ...options
    });
};

/**
 * Create a new cv
 */
export const cvsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CvsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CvsControllerCreateResponses, CvsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/cvs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all cvs count for the logged-in candidate
 */
export const cvsControllerGetCount = <ThrowOnError extends boolean = false>(options?: Options<CvsControllerGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CvsControllerGetCountResponses, CvsControllerGetCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/cvs/count',
        ...options
    });
};

/**
 * Delete an cv by ID
 */
export const cvsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CvsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CvsControllerRemoveResponses, CvsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/cvs/{id}',
        ...options
    });
};

/**
 * Get notification settings for logged-in user.
 */
export const candidateNotificationsControllerFind = <ThrowOnError extends boolean = false>(options?: Options<CandidateNotificationsControllerFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateNotificationsControllerFindResponses, CandidateNotificationsControllerFindErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/notifications',
        ...options
    });
};

/**
 * Create or update notification settings for logged-in user.
 */
export const candidateNotificationsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateNotificationsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateNotificationsControllerCreateResponses, CandidateNotificationsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get career info for the logged-in candidate
 */
export const candidateCareerInfoControllerFind = <ThrowOnError extends boolean = false>(options?: Options<CandidateCareerInfoControllerFindData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CandidateCareerInfoControllerFindResponses, CandidateCareerInfoControllerFindErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/career-info',
        ...options
    });
};

/**
 * Create or update career info for the logged-in candidate
 */
export const candidateCareerInfoControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CandidateCareerInfoControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CandidateCareerInfoControllerCreateResponses, CandidateCareerInfoControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/candidate/career-info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const jobsControllerGetRecommendedJobs = <ThrowOnError extends boolean = false>(options: Options<JobsControllerGetRecommendedJobsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<JobsControllerGetRecommendedJobsResponses, JobsControllerGetRecommendedJobsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/jobs/recommended/{userId}',
        ...options
    });
};

export const jobsControllerGetJobs = <ThrowOnError extends boolean = false>(options?: Options<JobsControllerGetJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<JobsControllerGetJobsResponses, JobsControllerGetJobsErrors, ThrowOnError>({
        url: '/jobs/all',
        ...options
    });
};

export const jobsControllerGetTrendingJobs = <ThrowOnError extends boolean = false>(options?: Options<JobsControllerGetTrendingJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<JobsControllerGetTrendingJobsResponses, unknown, ThrowOnError>({
        url: '/jobs/trending-jobs',
        ...options
    });
};

/**
 * Get list of all countries.
 */
export const staticDataControllerGetCountries = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetCountriesResponses, StaticDataControllerGetCountriesErrors, ThrowOnError>({
        url: '/static-data/countries',
        ...options
    });
};

/**
 * Get list of all countries with query.
 */
export const staticDataControllerGetCountriesWithQuery = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetCountriesWithQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetCountriesWithQueryResponses, StaticDataControllerGetCountriesWithQueryErrors, ThrowOnError>({
        url: '/static-data/countries/search',
        ...options
    });
};

/**
 * Get list of all states by country id.
 */
export const staticDataControllerGetStatesByCountryId = <ThrowOnError extends boolean = false>(options: Options<StaticDataControllerGetStatesByCountryIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StaticDataControllerGetStatesByCountryIdResponses, StaticDataControllerGetStatesByCountryIdErrors, ThrowOnError>({
        url: '/static-data/countries/{countryId}/states',
        ...options
    });
};

/**
 * Get list of all cities by state id.
 */
export const staticDataControllerGetCitiesByStateId = <ThrowOnError extends boolean = false>(options: Options<StaticDataControllerGetCitiesByStateIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StaticDataControllerGetCitiesByStateIdResponses, StaticDataControllerGetCitiesByStateIdErrors, ThrowOnError>({
        url: '/static-data/states/{stateId}/cities',
        ...options
    });
};

/**
 * Get list of all job categories (categories).
 */
export const staticDataControllerGetCategories = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetCategoriesResponses, StaticDataControllerGetCategoriesErrors, ThrowOnError>({
        url: '/static-data/categories',
        ...options
    });
};

/**
 * Get list of all job titles (functional areas) by category id.
 */
export const staticDataControllerGetFunctionalAreas = <ThrowOnError extends boolean = false>(options: Options<StaticDataControllerGetFunctionalAreasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StaticDataControllerGetFunctionalAreasResponses, StaticDataControllerGetFunctionalAreasErrors, ThrowOnError>({
        url: '/static-data/categories/{categoryId}/functional-areas',
        ...options
    });
};

/**
 * Get list of all functional areas with query.
 */
export const staticDataControllerGetFunctionalAreasWithQuery = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetFunctionalAreasWithQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetFunctionalAreasWithQueryResponses, StaticDataControllerGetFunctionalAreasWithQueryErrors, ThrowOnError>({
        url: '/static-data/functional-areas/search',
        ...options
    });
};

/**
 * Get list of all job types.
 */
export const staticDataControllerGetJobTypes = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetJobTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetJobTypesResponses, StaticDataControllerGetJobTypesErrors, ThrowOnError>({
        url: '/static-data/job-types',
        ...options
    });
};

/**
 * Get list of all degree levels.
 */
export const staticDataControllerFindAllDegreeLevels = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerFindAllDegreeLevelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerFindAllDegreeLevelsResponses, StaticDataControllerFindAllDegreeLevelsErrors, ThrowOnError>({
        url: '/static-data/degree-levels',
        ...options
    });
};

/**
 * Get list of all degree types.
 */
export const staticDataControllerGetDegreeTypes = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetDegreeTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetDegreeTypesResponses, StaticDataControllerGetDegreeTypesErrors, ThrowOnError>({
        url: '/static-data/degree-types',
        ...options
    });
};

/**
 * Get list of all skills with optional query parameter.
 */
export const staticDataControllerGetSkills = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetSkillsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetSkillsResponses, StaticDataControllerGetSkillsErrors, ThrowOnError>({
        url: '/static-data/skills',
        ...options
    });
};

/**
 * Get list of all genders.
 */
export const staticDataControllerGetGenders = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetGendersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetGendersResponses, StaticDataControllerGetGendersErrors, ThrowOnError>({
        url: '/static-data/genders',
        ...options
    });
};

/**
 * Get list of all marital statuses.
 */
export const staticDataControllerGetMaritalStatuses = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetMaritalStatusesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetMaritalStatusesResponses, StaticDataControllerGetMaritalStatusesErrors, ThrowOnError>({
        url: '/static-data/marital-statuses',
        ...options
    });
};

/**
 * Get list of all military statuses.
 */
export const staticDataControllerGetMilitaryStatuses = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetMilitaryStatusesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetMilitaryStatusesResponses, StaticDataControllerGetMilitaryStatusesErrors, ThrowOnError>({
        url: '/static-data/military-statuses',
        ...options
    });
};

/**
 * Get list of all career levels.
 */
export const staticDataControllerGetCareerLevels = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetCareerLevelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetCareerLevelsResponses, StaticDataControllerGetCareerLevelsErrors, ThrowOnError>({
        url: '/static-data/career-levels',
        ...options
    });
};

/**
 * Get list of all career levels.
 */
export const staticDataControllerGetCurrencies = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetCurrenciesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetCurrenciesResponses, StaticDataControllerGetCurrenciesErrors, ThrowOnError>({
        url: '/static-data/currencies',
        ...options
    });
};

/**
 * Get site settings.
 */
export const staticDataControllerGetSiteSettings = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetSiteSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetSiteSettingsResponses, StaticDataControllerGetSiteSettingsErrors, ThrowOnError>({
        url: '/static-data/site-settings',
        ...options
    });
};

/**
 * Get list of all industries.
 */
export const staticDataControllerGetIndustries = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetIndustriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetIndustriesResponses, StaticDataControllerGetIndustriesErrors, ThrowOnError>({
        url: '/static-data/industries',
        ...options
    });
};

/**
 * Get list of all ownership types.
 */
export const staticDataControllerGetOwnershipTypes = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetOwnershipTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetOwnershipTypesResponses, StaticDataControllerGetOwnershipTypesErrors, ThrowOnError>({
        url: '/static-data/ownership-types',
        ...options
    });
};

/**
 * Get list of all plans.
 */
export const staticDataControllerGetPlans = <ThrowOnError extends boolean = false>(options?: Options<StaticDataControllerGetPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StaticDataControllerGetPlansResponses, StaticDataControllerGetPlansErrors, ThrowOnError>({
        url: '/static-data/plans',
        ...options
    });
};

/**
 * Search companies by keyword
 */
export const companiesControllerSearchByKeyword = <ThrowOnError extends boolean = false>(options?: Options<CompaniesControllerSearchByKeywordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompaniesControllerSearchByKeywordResponses, CompaniesControllerSearchByKeywordErrors, ThrowOnError>({
        url: '/companies/search',
        ...options
    });
};

/**
 * Get companies that have active jobs
 */
export const companiesControllerGetCompanyJobs = <ThrowOnError extends boolean = false>(options?: Options<CompaniesControllerGetCompanyJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompaniesControllerGetCompanyJobsResponses, CompaniesControllerGetCompanyJobsErrors, ThrowOnError>({
        url: '/companies/with-active-jobs',
        ...options
    });
};

/**
 * Create a new company
 */
export const companiesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CompaniesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompaniesControllerCreateResponses, CompaniesControllerCreateErrors, ThrowOnError>({
        url: '/companies/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a company
 */
export const companiesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CompaniesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CompaniesControllerUpdateResponses, CompaniesControllerUpdateErrors, ThrowOnError>({
        url: '/companies/update/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a company by slug
 */
export const companiesControllerGetBySlug = <ThrowOnError extends boolean = false>(options: Options<CompaniesControllerGetBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CompaniesControllerGetBySlugResponses, CompaniesControllerGetBySlugErrors, ThrowOnError>({
        url: '/companies/slug/{slug}',
        ...options
    });
};

/**
 * Get companies with pagination
 */
export const companiesControllerGetCompaniesWithPagination = <ThrowOnError extends boolean = false>(options?: Options<CompaniesControllerGetCompaniesWithPaginationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompaniesControllerGetCompaniesWithPaginationResponses, CompaniesControllerGetCompaniesWithPaginationErrors, ThrowOnError>({
        url: '/companies/pagination',
        ...options
    });
};

export const employerJobsControllerGetAll = <ThrowOnError extends boolean = false>(options?: Options<EmployerJobsControllerGetAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmployerJobsControllerGetAllResponses, unknown, ThrowOnError>({
        url: '/employer/jobs',
        ...options
    });
};

export const employerJobsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<EmployerJobsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EmployerJobsControllerCreateResponses, unknown, ThrowOnError>({
        url: '/employer/jobs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const employerJobsControllerDelete = <ThrowOnError extends boolean = false>(options: Options<EmployerJobsControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EmployerJobsControllerDeleteResponses, unknown, ThrowOnError>({
        url: '/employer/jobs/{id}',
        ...options
    });
};

export const employerJobsControllerGetOne = <ThrowOnError extends boolean = false>(options: Options<EmployerJobsControllerGetOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EmployerJobsControllerGetOneResponses, unknown, ThrowOnError>({
        url: '/employer/jobs/{id}',
        ...options
    });
};

export const employerJobsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<EmployerJobsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EmployerJobsControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/employer/jobs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get admin dashboard statistics
 */
export const adminControllerGetAdminDashboard = <ThrowOnError extends boolean = false>(options?: Options<AdminControllerGetAdminDashboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminControllerGetAdminDashboardResponses, AdminControllerGetAdminDashboardErrors, ThrowOnError>({
        url: '/admin/dashboard',
        ...options
    });
};