// This file is auto-generated by @hey-api/openapi-ts

export type Role = 'EMPLOYER' | 'CANDIDATE' | 'ADMIN' | 'SUPER_ADMINISTRATOR' | 'CLIENT_ADMIN' | 'ACCOUNTS_ADMIN' | 'CLIENTS_ACCOUNTS_ADMIN' | 'CONTENT_MODERATOR' | 'CLIENT_CONTENT_MODERATOR' | 'CUSTOMER_SUPPORT' | 'CLIENT_CUSTOMER_SUPPORT';

export type ActivateToken = {
    id: string;
    token: string;
    otp?: string;
    activatedAt?: string;
    createdAt: string;
    updatedAt: string;
    user: User;
    userId: string;
};

export type PasswordResetToken = {
    id: string;
    token: string;
    createdAt: string;
    resetAt?: string;
    user: User;
    userId: string;
};

export type JobWorkplace = 'REMOTE' | 'HYBRID' | 'ONSITE';

export type DegreeType = {
    id: string;
    idOld?: number;
    degreeLevelIdOld?: number;
    degreeTypeId?: number;
    degreeType?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    translation?: DegreeType;
    translationId?: string;
    translations: Array<DegreeType>;
    degreeLevel?: DegreeLevel;
    degreeLevelId?: string;
    educations: Array<Education>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type OtherDegreeType = {
    id: string;
    otherDegreeType: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    degreeLevel?: DegreeLevel;
    degreeLevelId?: string;
    educations: Array<Education>;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
};

export type DegreeLevel = {
    id: string;
    idOld?: number;
    degreeLevelId?: number;
    degreeLevel: string;
    isDefault: boolean;
    isActive: boolean;
    otherVal?: string;
    sortOrder?: number;
    lang: string;
    translation?: DegreeLevel;
    translationId?: string;
    translations: Array<DegreeLevel>;
    jobs: Array<Job>;
    educations: Array<Education>;
    degreeTypes: Array<DegreeType>;
    otherDegreeType: Array<OtherDegreeType>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type Education = {
    id: string;
    degree_title: string;
    institution?: string;
    from?: string;
    to?: string;
    description?: string;
    degree_result?: number;
    attachments: Array<string>;
    isOngoing: boolean;
    archived: boolean;
    degreeLevel?: DegreeLevel;
    degreeLevelId?: string;
    degreeType?: DegreeType;
    degreeTypeId?: string;
    otherDegreeType?: OtherDegreeType;
    otherDegreeTypeId?: string;
    user?: User;
    userId?: string;
    createdAt: string;
    updatedAt: string;
    idOld?: number;
    degreeLevelIdOld?: number;
    degreeTypeIdOld?: number;
    country?: Country;
    countryId?: string;
    countryIdOld?: number;
    state?: State;
    stateId?: string;
    stateIdOld?: number;
    city?: City;
    cityId?: string;
    cityIdOld?: number;
    year_from?: number;
    year_to?: number;
    dateCompletionOld?: number;
    degreeResultOld?: string;
    resultTypeIdOld?: number;
    userIdOld?: number;
    result_type?: string;
};

export type IndustryCategory = {
    id: string;
    name: string;
    industries: Array<Industry>;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    createdAt: string;
    updatedAt: string;
};

export type AvailableFrequency = 'NOW' | 'NEXT_WEEK' | 'NEXT_MONTH' | 'IN_2_MONTHS' | 'IN_3_MONTHS' | 'IN_3_6_MONTHS';

export type WorkplacePeriod = 'Remote' | 'Hybrid' | 'Onsite';

export type CareerLevel = {
    id: string;
    idOld?: number;
    careerLevelId?: number;
    careerLevel: string;
    isDefault: boolean;
    isActive: boolean;
    otherVal?: string;
    sortOrder?: number;
    lang: string;
    translation?: CareerLevel;
    translationId?: string;
    translations: Array<CareerLevel>;
    jobs: Array<Job>;
    careerInfos: Array<CareerInfo>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type Currency = {
    id: string;
    idOld?: number;
    name: string;
    status?: number;
    jobs: Array<Job>;
    profiles: Array<Profile>;
    careerInfos: Array<CareerInfo>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type Category = {
    id: string;
    categoryName: string;
    isActive?: boolean;
    lang?: string;
    functionalAreas: Array<FunctionalArea>;
    careerInfos: Array<CareerInfo>;
    parentCategory?: Category;
    parentCategoryId?: string;
    translations: Array<Category>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    Job: Array<Job>;
    Profile: Array<Profile>;
};

export type JobsOnFunctionalAreas = {
    id: string;
    job: Job;
    jobId: string;
    functionalArea: FunctionalArea;
    functionalAreaId: string;
    createdAt: string;
    updatedAt: string;
};

export type FunctionalArea = {
    id: string;
    idOld?: number;
    img?: string;
    functionalAreaId?: number;
    functionalArea: string;
    isDefault: boolean;
    isActive: boolean;
    otherVal?: string;
    sortOrder?: number;
    categoryId?: string;
    category?: Category;
    lang: string;
    translation?: FunctionalArea;
    translationId?: string;
    translations: Array<FunctionalArea>;
    jobs: Array<JobsOnFunctionalAreas>;
    careerInfos: Array<CareerInfo>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    Profile: Array<Profile>;
};

export type OtherSkill = {
    id: string;
    otherSkill?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    candidateSkills: Array<CandidateSkill>;
    jobSkills: Array<JobSkill>;
    createdAt: string;
    updatedAt: string;
};

export type JobSkill = {
    id: string;
    skill?: Skill;
    skillId?: string;
    otherSkill?: OtherSkill;
    otherSkillId?: string;
    job: Job;
    jobId: string;
    archived: boolean;
    createdAt: string;
    updatedAt: string;
};

export type Skill = {
    id: string;
    idOld?: number;
    jobSkill: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    translation?: Skill;
    translationId?: string;
    translations: Array<Skill>;
    candidateSkills: Array<CandidateSkill>;
    jobSkills: Array<JobSkill>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type SkillExperience = {
    id: string;
    experience: string;
    lang?: string;
    candidateSkills: Array<CandidateSkill>;
    isDefault: boolean;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
};

export type CandidateSkill = {
    id: string;
    percentage?: number;
    yearsOfExperience?: number;
    skill?: Skill;
    skillId?: string;
    otherSkill?: OtherSkill;
    otherSkillId?: string;
    jobExperience?: JobExperience;
    jobExperienceId?: string;
    archived: boolean;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
    Profile?: Profile;
    profileId?: string;
    SkillExperience?: SkillExperience;
    skillExperienceId?: string;
};

export type JobExperience = {
    id: string;
    idOld?: number;
    jobExperienceId?: number;
    jobExperience: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: JobExperience;
    translationId?: string;
    translations: Array<JobExperience>;
    jobs: Array<Job>;
    candidateSkills: Array<CandidateSkill>;
    profiles: Array<Profile>;
    careerInfos: Array<CareerInfo>;
    createdAt: string;
    updatedAt: string;
};

export type OtherCareerLevel = {
    id: string;
    otherCareerLevel: string;
    isDefault: boolean;
    isActive: boolean;
    lang: string;
    jobs: Array<Job>;
    careerInfos: Array<CareerInfo>;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
};

export type OtherIndustry = {
    id: string;
    otherIndustry: string;
    isActive: boolean;
    isDefault?: boolean;
    lang?: string;
    careerInfos: Array<CareerInfo>;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
};

export type CareerInfo = {
    id: string;
    isAvailable?: boolean;
    availableFrequency?: AvailableFrequency;
    openToStudent?: boolean;
    openToVolunteering?: boolean;
    openToInternship?: boolean;
    openToPartTime?: boolean;
    partTimeExpectedSalary?: number;
    openToFullTime?: boolean;
    fullTimeExpectedSalary?: number;
    workplace?: WorkplacePeriod;
    showSalary?: boolean;
    careerLevel?: CareerLevel;
    careerLevelId?: string;
    salaryCurrency?: Currency;
    salaryCurrencyId?: string;
    functionalArea?: FunctionalArea;
    functionalAreaId?: string;
    category?: Category;
    categoryId?: string;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
    currentSalary?: number;
    expectedSalary?: number;
    jobExperience?: JobExperience;
    jobExperienceId?: string;
    otherCareerLevel?: OtherCareerLevel;
    otherCareerLevelId?: string;
    industry?: Industry;
    industryId?: string;
    otherIndustry?: OtherIndustry;
    otherIndustryId?: string;
};

export type Industry = {
    id: string;
    industryId?: number;
    industry: string;
    industryCategory?: IndustryCategory;
    industryCategoryId?: string;
    isActive: boolean;
    isDefault?: boolean;
    sortOrder?: number;
    lang?: string;
    translation?: Industry;
    translationId?: string;
    translations: Array<Industry>;
    employerProfiles: Array<EmployerProfile>;
    careerInfos: Array<CareerInfo>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type OwnershipType = {
    id: string;
    idOld?: number;
    ownershipTypeId?: number;
    ownershipType: string;
    isActive: boolean;
    isDefault: boolean;
    sortOrder?: number;
    lang: string;
    translation?: OwnershipType;
    translationId?: string;
    translations: Array<OwnershipType>;
    employer_profiles: Array<EmployerProfile>;
    createdAt: string;
    updatedAt: string;
};

export type OtherOwnershipType = {
    id: string;
    otherOwnershipType: string;
    isActive: boolean;
    isDefault: boolean;
    lang: string;
    user: User;
    userId: string;
    employer_profiles: Array<EmployerProfile>;
    createdAt: string;
    updatedAt: string;
};

export type Status = 'OPEN' | 'CLOSE';

export type ReportAbuse = {
    id: string;
    userId: string;
    reportableId: string;
    reportableType: string;
    reason: string;
    description: string;
    status: Status;
    createdAt: string;
    updatedAt: string;
    user: User;
    job?: Job;
    company?: EmployerProfile;
};

export type Type = 'USER' | 'ADMIN';

export type SlugHistory = {
    id: string;
    employerId: string;
    oldSlug?: string;
    newSlug: string;
    changedAt: string;
    employer: EmployerProfile;
};

export type EmployerProfile = {
    id: string;
    idOld?: number;
    companyLogo?: string;
    companyName?: string;
    slug?: string;
    ceo?: string;
    industry?: Industry;
    industryId?: string;
    ownershipType?: OwnershipType;
    ownershipTypeId?: string;
    otherOwnershipType?: OtherOwnershipType;
    otherOwnershipTypeId?: string;
    description?: string;
    address?: string;
    noOfEmployees?: string;
    year?: number;
    establishedMonth?: string;
    establishedDay?: string;
    webUrl?: string;
    fax?: string;
    phone?: string;
    fb?: string;
    twitter?: string;
    linkedIn?: string;
    googlePlus?: string;
    pinterest?: string;
    country?: Country;
    countryId?: string;
    state?: State;
    stateId?: string;
    customState?: string;
    city?: City;
    cityId?: string;
    customCity?: string;
    customIndustry?: string;
    contactPerson?: string;
    responsiblePerson?: string;
    contactEmail?: string;
    approved?: boolean;
    submittedForApproval?: boolean;
    contact?: string;
    subscribeToNewsletter?: string;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
    reports: Array<ReportAbuse>;
    type?: Type;
    slugHistories: Array<SlugHistory>;
    archived?: boolean;
    facebookUrl?: string;
    instagramUrl?: string;
    linkedinUrl?: string;
    building?: string;
    area?: string;
    video?: string;
    coverImage?: string;
    preferredLanguage?: string;
};

export type City = {
    id: string;
    idOld?: number;
    cityId?: number;
    city: string;
    stateIdOld?: number;
    state?: State;
    stateId?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: City;
    translationId?: string;
    translations: Array<City>;
    uploadImage?: string;
    profiles: Array<Profile>;
    educations: Array<Education>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    UserExperience: Array<UserExperience>;
    EmployerProfile: Array<EmployerProfile>;
};

export type State = {
    id: string;
    idOld?: number;
    stateId?: number;
    state: string;
    countryIdOld?: number;
    country?: Country;
    countryId?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: State;
    translationId?: string;
    translations: Array<State>;
    cities: Array<City>;
    profiles: Array<Profile>;
    educations: Array<Education>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    UserExperience: Array<UserExperience>;
    EmployerProfile: Array<EmployerProfile>;
};

export type SiteSettings = {
    id: string;
    siteName: string;
    siteSlogan: string;
    siteLogo: string;
    siteFavicon: string;
    sitePhonePrimary: string;
    sitePhoneSecondary: string;
    defaultCountryId: string;
    country?: Country;
    defaultCurrencyCode: string;
    siteStreetAddress: string;
    siteGoogleMap: string;
    mailDriver: string;
    mailHost: string;
    mailSecure?: string;
    mailPort: string;
    mailFromAddress: string;
    mailFromName: string;
    mailToAddress: string;
    mailToName: string;
    mailEncryption: string;
    mailUsername: string;
    mailPassword: string;
    mailSendmail: string;
    mailPretend: string;
    mailgunDomain: string;
    mailgunSecret: string;
    mandrillSecret: string;
    sparkpostSecret: string;
    sesKey: string;
    sesSecret: string;
    sesRegion: string;
    facebookAddress: string;
    twitterAddress: string;
    googlePlusAddress: string;
    youtubeAddress: string;
    instagramAddress: string;
    pinterestAddress: string;
    linkedinAddress: string;
    tumblrAddress: string;
    flickrAddress: string;
    indexPageBelowTopEmployesAd: string;
    indexPageBelowTopEmployesA: string;
    aboveFooterAd: string;
    dashboardPageAd: string;
    cmsPageAd: string;
    listingPageVerticalAd: string;
    listingPageHorizontalAd: string;
    captchaSitekey: string;
    captchaSecret: string;
    facebookAppId: string;
    facebeekAppSecret: string;
    googleAppId: string;
    googleAppSecret: string;
    twitterAppId: string;
    twitterAppSecret: string;
    paypalAccount: string;
    paypalClientId: string;
    paypalSecret: string;
    paypalLiveSandbox: string;
    stripeKey: string;
    stripeSecret: string;
    bankDetails: string;
    listingAge: number;
    countrySpecificSite: boolean;
    isPaypalActive: boolean;
    isBankTransferActive: boolean;
    isJobseekerPackageActive: boolean;
    isStripeActive: boolean;
    isSliderActive: boolean;
    mailchimpApiKey: string;
    mailchimpListName: string;
    mailchimpListId: string;
    isCompanyPackageActive: boolean;
    isPayuActive: boolean;
    payuMoneyMode: string;
    payuMoneyKey: string;
    salt: string;
    ganalytics: string;
    googleTagManagerForBody: string;
    googleTagManagerForHead: string;
    usernameJobg8: string;
    passwordJobg8: string;
    accountnumberJobg8: string;
    createdAt: string;
    updatedAt: string;
};

export type Country = {
    id: string;
    idOld?: number;
    countryId?: number;
    country: string;
    nationality?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: Country;
    translationId?: string;
    translations: Array<Country>;
    states: Array<State>;
    profiles: Array<Profile>;
    nationalityProfiles: Array<Profile>;
    educations: Array<Education>;
    userExperiences: Array<UserExperience>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    EmployerProfile: Array<EmployerProfile>;
    SiteSettings: Array<SiteSettings>;
};

export type UserExperience = {
    id: string;
    title: string;
    company?: string;
    from?: string;
    to?: string;
    description?: string;
    currentlyWorking: boolean;
    isActive: boolean;
    jobWorkplace?: JobWorkplace;
    jobType?: JobType;
    jobTypeId?: string;
    country?: Country;
    countryId?: string;
    state?: State;
    stateId?: string;
    city?: City;
    cityId?: string;
    user?: User;
    userId?: string;
    createdAt: string;
    updatedAt: string;
    idOld?: number;
    companyAddress?: string;
    companyContact?: string;
    referenceName?: string;
    referenceContact?: string;
    countryIdOld?: number;
    stateIdOld?: number;
    cityIdOld?: number;
    userIdOld?: number;
};

export type JobType = {
    id: string;
    idOld?: number;
    jobTypeId?: number;
    jobType: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: JobType;
    translationId?: string;
    translations: Array<JobType>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
    UserExperience: Array<UserExperience>;
};

export type JobShift = {
    id: string;
    idOld?: number;
    jobShiftId?: number;
    jobShift: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: JobShift;
    translationId?: string;
    translations: Array<JobShift>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
};

export type OtherDegreeLevel = {
    id: string;
    otherDegreeLevel: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    user: User;
    userId: string;
    job: Job;
    jobId: string;
    createdAt: string;
    updatedAt: string;
};

export type FavouriteJob = {
    id: string;
    user: User;
    userId: string;
    job: Job;
    jobId: string;
    createdAt: string;
    updatedAt: string;
};

export type OtherFunctionalArea = {
    id: string;
    name: string;
    job: Job;
    jobId: string;
    createdAt: string;
    updatedAt: string;
};

export type ApplicationStatus = 'PENDING' | 'SHORTLISTED' | 'INTERVIEW' | 'ACCEPTED' | 'REJECTED' | 'ARCHIVED';

export type JobApplication = {
    id: string;
    candidate: User;
    candidateId: string;
    job: Job;
    jobId: string;
    status: ApplicationStatus;
    createdAt: string;
    updatedAt: string;
};

export type JobStatus = 'OPEN' | 'CLOSED';

export type JobInvitations = {
    id: string;
    employer: User;
    employerId: string;
    candidate?: User;
    candidateId?: string;
    job: Job;
    jobId: string;
    inviteToken?: string;
    isOpened: boolean;
    isAccepted: boolean;
    isRejected: boolean;
    createdAt: string;
    updatedAt: string;
};

export type Job = {
    id: string;
    idOld?: number;
    title: string;
    sortPriority: number;
    slug?: string;
    countryIdOld?: number;
    stateIdOld?: number;
    cityIdOld?: number;
    careerLevelIdOld?: number;
    isFreelance?: number;
    salaryPeriodIdOld?: number;
    functionalAreaIdOld?: number;
    jobTypeIdOld?: number;
    genderIdOld?: number;
    jobShiftIdOld?: number;
    expiryDateOld?: string;
    degreeLevelIdOld?: number;
    jobExperienceIdOld?: number;
    search?: string;
    reference?: string;
    location?: string;
    logo?: string;
    type?: string;
    postalCode?: string;
    jobAdvertiser?: string;
    applicationUrl?: string;
    jsonObject?: string;
    jobType?: JobType;
    jobTypeId?: string;
    functionalAreas: Array<JobsOnFunctionalAreas>;
    jobShift?: JobShift;
    jobShiftId?: string;
    careerLevel?: CareerLevel;
    careerLevelId?: string;
    otherCareerLevel?: OtherCareerLevel;
    otherCareerLevelId?: string;
    positions?: number;
    jobExperience?: JobExperience;
    jobExperienceId?: string;
    gender?: Gender;
    genderId?: string;
    degreeLevel?: DegreeLevel;
    degreeLevelId?: string;
    otherDegreeLevel?: OtherDegreeLevel;
    applyBefore?: string;
    jobSkills: Array<JobSkill>;
    jobTags: Array<string>;
    description?: string;
    requirements?: string;
    benefits?: string;
    salaryFrom?: number;
    salaryTo?: number;
    hideSalary?: boolean;
    companyConfidential?: boolean;
    salaryCurrencyOld?: string;
    salary?: number;
    salaryCurrency?: Currency;
    salaryCurrencyId?: string;
    country?: Country;
    countryId?: string;
    state?: State;
    stateId?: string;
    city?: City;
    cityId?: string;
    customState?: string;
    customCity?: string;
    employer?: User;
    employerId?: string;
    companyIdOld?: number;
    isActive: boolean;
    isFeatured: boolean;
    isArchived: boolean;
    favouriteJobs: Array<FavouriteJob>;
    otherFunctionalAreas: Array<OtherFunctionalArea>;
    jobApplications: Array<JobApplication>;
    jobStatus: JobStatus;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    reports: Array<ReportAbuse>;
    AddedBy?: string;
    category?: Category;
    categoryId?: string;
    views: number;
    externalLink?: string;
    reactivatedAt?: string;
    jobWorkplace?: JobWorkplace;
    JobInvitations: Array<JobInvitations>;
};

export type Gender = {
    id: string;
    idOld?: number;
    genderId?: number;
    gender: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: Gender;
    translationId?: string;
    translations: Array<Gender>;
    profiles: Array<Profile>;
    jobs: Array<Job>;
    createdAt: string;
    updatedAt: string;
};

export type MaritalStatus = {
    id: string;
    idOld?: number;
    maritalStatusId?: number;
    maritalStatus?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: MaritalStatus;
    translationId?: string;
    translations: Array<MaritalStatus>;
    profiles: Array<Profile>;
    createdAt: string;
    updatedAt: string;
};

export type MilitaryStatus = {
    id: string;
    militaryStatus?: string;
    isActive: boolean;
    sortOrder?: number;
    lang: string;
    translation?: MilitaryStatus;
    translationId?: string;
    translations: Array<MilitaryStatus>;
    profiles: Array<Profile>;
    createdAt: string;
    updatedAt: string;
};

export type OtherNationality = {
    id: string;
    otherNationality?: string;
    isDefault: boolean;
    isActive: boolean;
    sortOrder?: number;
    lang?: string;
    profiles: Array<Profile>;
    createdAt: string;
    updatedAt: string;
};

export type Profile = {
    id: string;
    intro?: string;
    video?: string;
    summary?: string;
    profileImage?: string;
    profilePhoto?: string;
    gender?: Gender;
    genderId?: string;
    genderIdOld?: number;
    maritalStatus?: MaritalStatus;
    maritalStatusId?: string;
    militaryStatus?: MilitaryStatus;
    militaryStatusId?: string;
    maritalStatusIdOld?: number;
    country?: Country;
    countryId?: string;
    countryIdOld?: number;
    state?: State;
    stateId?: string;
    stateIdOld?: number;
    city?: City;
    cityId?: string;
    cityIdOld?: number;
    nationality?: Country;
    nationalityId?: string;
    otherNationality?: OtherNationality;
    otherNationalityId?: string;
    nationalityIdOld?: number;
    dob?: string;
    cnic?: string;
    phone?: string;
    mobile?: string;
    whatsapp?: string;
    secondaryEmail?: string;
    streetAddress?: string;
    areaAddress?: string;
    buildingAddress?: string;
    relocate?: boolean;
    currentSalary?: string;
    expectedSalary?: string;
    currency?: Currency;
    currencyId?: string;
    jobExperience?: JobExperience;
    jobExperienceId?: string;
    jobExperienceIdOld?: number;
    approved?: boolean;
    submittedForApproval?: boolean;
    user?: User;
    userId?: string;
    createdAt: string;
    updatedAt: string;
    lastLoginAt?: string;
    languageIds: Array<string>;
    languages: Array<Array<unknown>>;
    archived?: boolean;
    preferredLanguage?: string;
    category?: Category;
    categoryId?: string;
    functionalArea?: FunctionalArea;
    candidateSkills: Array<CandidateSkill>;
    functionalAreaId?: string;
    minSalary?: string;
    maxSalary?: string;
};

export type SubscriptionStatus = 'ACTIVE' | 'EXPIRED' | 'INACTIVE';

export type SubscriptionDuration = 'MONTHLY' | 'MONTHS6' | 'YEARLY';

export type Payment = {
    id: string;
    amount: number;
    method: string;
    currency: string;
    card_last4?: number;
    type?: string;
    planDuration: string;
    paymobTransactionId: number;
    userId: string;
    user: User;
    planId: string;
    plan: Plan;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type Plan = {
    id: string;
    name: string;
    description?: string;
    price: number;
    jobs: number;
    invites: number;
    unlocks: number;
    discount?: number;
    active: boolean;
    sort: number;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    Payment: Array<Payment>;
    Subscription: Array<Subscription>;
};

export type Subscription = {
    id: string;
    startDate: string;
    endDate: string;
    status: SubscriptionStatus;
    duration: SubscriptionDuration;
    jobs: number;
    invites: number;
    unlocks: number;
    userId: string;
    user: User;
    planId: string;
    plan: Plan;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
};

export type Unlock = {
    id: string;
    unlockedBy: User;
    unlockedById: string;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt?: string;
};

export type Message = {
    id: string;
    content?: string;
    createdAt?: string;
    updatedAt?: string;
    chatroomId: string;
    chatroom: Chatroom;
    senderId: string;
    sender: User;
    seen: boolean;
};

export type Chatroom = {
    id: string;
    name?: string;
    messagesIds: Array<string>;
    messages: Array<Message>;
    userIds: Array<string>;
    users: Array<User>;
    createdAt?: string;
    updatedAt?: string;
    lastMessageAt?: string;
};

export type Block = {
    id: string;
    blockedUserId: string;
    blockingUserId: string;
    createdAt?: string;
    updatedAt?: string;
    User?: User;
    userId?: string;
};

export type Cv = {
    id: string;
    name: string;
    file: string;
    is_default: boolean;
    user: User;
    userId: string;
    archived: boolean;
    is_analyzed: boolean;
    createdAt: string;
    updatedAt: string;
};

export type Project = {
    id: string;
    name: string;
    company?: string;
    image?: string;
    attachments: Array<string>;
    url?: string;
    startDate?: string;
    endDate?: string;
    currentlyOngoing?: boolean;
    description?: string;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type Language = {
    id: string;
    name_en: string;
    name_ar?: string;
    archived: boolean;
    manage_languages: Array<ManageLanguage>;
    createdAt: string;
    updatedAt: string;
};

export type LanguageLevel = {
    id: string;
    name_en: string;
    name_ar?: string;
    archived: boolean;
    manage_languages: Array<ManageLanguage>;
    createdAt: string;
    updatedAt: string;
};

export type ManageLanguage = {
    id: string;
    language?: Language;
    languageId?: string;
    language_level?: LanguageLevel;
    languageLevelId?: string;
    archived: boolean;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
};

export type Follow = {
    id: string;
    follower: User;
    followerId: string;
    following: User;
    followingId: string;
    createdAt: string;
    updatedAt: string;
};

export type OtherUserFunctionalArea = {
    id: string;
    img?: string;
    otherUserFunctionalArea: string;
    isDefault: boolean;
    isActive: boolean;
    lang: string;
    user: User;
    userId: string;
    createdAt: string;
    updatedAt: string;
};

export type NotificationPeriod = 'daily' | 'weekly' | 'fortnightly' | 'monthly';

export type UserNotificationSettings = {
    id: string;
    user?: User;
    userId: string;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    jobSuggestions: boolean;
    jobSuggestionsFrequency: NotificationPeriod;
    jobSaved: boolean;
    jobSavedFrequency: NotificationPeriod;
    followJobPosts: boolean;
    followJobPostsFrequency: NotificationPeriod;
    jobApplicationIncomplete: boolean;
    jobApplicationIncompleteFrequency: NotificationPeriod;
    jobApplicationStatusUpdate: boolean;
    profileViews: boolean;
    profileUnlocks: boolean;
    resumeDownloads: boolean;
    newsletter: boolean;
    newsletterFrequency: NotificationPeriod;
    messageReceived: boolean;
    informationRequested: boolean;
    newFollower: boolean;
    interviewInvitations: boolean;
    status: boolean;
    skillEndorsed: boolean;
    candidateApplied: boolean;
    postExpired: boolean;
    subscriptionExpired: boolean;
};

export type SubAccountType = 'USER' | 'AMIN';

export type Invitation = {
    id: string;
    user?: User;
    userId?: string;
    emails: Array<string>;
    createdAt: string;
    updatedAt: string;
};

export type Session = {
    id: string;
    userId: string;
    user: User;
    createdAt: string;
    expiresAt?: string;
};

export type User = {
    id: string;
    firstName?: string;
    middleName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    image?: string;
    coverImage?: string;
    videoLink?: string;
    role?: Role;
    lang?: string;
    isSubscribed?: number;
    provider?: string;
    isEmailVerified?: boolean;
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
    verified?: boolean;
    activateTokens: Array<ActivateToken>;
    passwordResetToken: Array<PasswordResetToken>;
    profile?: Profile;
    employer_profile?: EmployerProfile;
    subscriptionId?: string;
    subscription?: Subscription;
    unlockedBy: Array<Unlock>;
    unlocks: Array<Unlock>;
    chatroomsIds: Array<string>;
    chatrooms: Array<Chatroom>;
    messages: Array<Message>;
    blocks: Array<Block>;
    idOld?: number;
    isActive?: boolean;
    immediateAvailable?: boolean;
    hideName?: boolean;
    career_info?: CareerInfo;
    cvs: Array<Cv>;
    projects: Array<Project>;
    userExperiences: Array<UserExperience>;
    educations: Array<Education>;
    manage_languages: Array<ManageLanguage>;
    jobs: Array<Job>;
    jobApplications: Array<JobApplication>;
    sentInvitations: Array<JobInvitations>;
    receivedInvitations: Array<JobInvitations>;
    favouriteJobs: Array<FavouriteJob>;
    candidateSkills: Array<CandidateSkill>;
    followers: Array<Follow>;
    following: Array<Follow>;
    otherDegreeType: Array<OtherDegreeType>;
    invoices: Array<Payment>;
    otherCareerLevel?: OtherCareerLevel;
    otherOwnershipType?: OtherOwnershipType;
    otherUserFunctionalArea?: OtherUserFunctionalArea;
    EmployerId?: string;
    notificationPeriod?: string;
    lastNotifiedAt?: string;
    archived?: boolean;
    notificationSettings?: UserNotificationSettings;
    isMainAccount?: boolean;
    subAccountType?: SubAccountType;
    OtherDegreeLevel?: OtherDegreeLevel;
    OtherIndustry?: OtherIndustry;
    Invitation: Array<Invitation>;
    ReportAbuse: Array<ReportAbuse>;
    Session: Array<Session>;
};

export type LoginResponseDto = {
    access_token: string;
    user: User;
};

export type LoginDto = {
    /**
     * Registered user email
     */
    email: string;
    /**
     * User password
     */
    password: string;
};

export type RegisterDto = {
    /**
     * The email address of the user
     */
    email: string;
    /**
     * The password for the user account
     */
    password: string;
    /**
     * The confirmation of the password
     */
    confirmPassword: string;
    /**
     * The role of the user
     */
    role: 'EMPLOYER' | 'CANDIDATE';
    /**
     * The first name of the user
     */
    firstName: string;
    /**
     * The last name of the user (required for CANDIDATE)
     */
    lastName?: string;
    /**
     * MongoDB ObjectId for the user's country
     */
    countryId: string;
    /**
     * MongoDB ObjectId for the user's state (optional)
     */
    stateId?: string;
    /**
     * MongoDB ObjectId for the user's city (optional)
     */
    cityId?: string;
    /**
     * MongoDB ObjectId for the Job Category (required for CANDIDATE)
     */
    categoryId?: string;
    /**
     * ID of the Job Title (Functional Area)
     */
    functionalAreaId?: string | null;
    /**
     * Coupon code for registration (optional for EMPLOYER)
     */
    couponCode?: string;
    industryId?: string;
    /**
     * Career level ID (MongoDB ObjectId)
     */
    careerLevelId?: string;
    /**
     * Career level (backward compatibility)
     */
    careerLevel?: string;
    /**
     * Job type ID (MongoDB ObjectId)
     */
    jobTypeId?: string;
    salaryRange?: {
        minSalary?: string;
        maxSalary?: string;
        currencyId?: string;
    };
    /**
     * Preferred work type for the candidate
     */
    preferredWorkType?: 'Remote' | 'Hybrid' | 'Onsite';
    /**
     * Desired position/title for the candidate
     */
    desiredPosition?: string;
    skillIds: Array<string>;
};

export type ActivateDto = {
    /**
     * The token for account activation (required if method is TOKEN)
     */
    token?: string;
    /**
     * The OTP sent to the user (required if method is OTP)
     */
    otp?: string;
    /**
     * The user ID (required if method is OTP)
     */
    userId?: string;
    /**
     * Activation method, either TOKEN or OTP
     */
    method: 'TOKEN' | 'OTP';
};

export type ForgetPasswordDto = {
    /**
     * Registered email to send password reset link to
     */
    email: string;
};

export type ResetPasswordDto = {
    password: string;
    confirmPassword: string;
    /**
     * The token received in the password reset email
     */
    token: string;
};

export type EmailDto = {
    /**
     * Please add your email address.
     */
    email: string;
};

export type PasswordDto = {
    currentPassword: string;
    password: string;
    confirmPassword: string;
};

export type CandidateStatisticsResponseDto = {
    /**
     * Number of times the candidate profile has been viewed.
     */
    profileViewsCount: number;
    /**
     * Number of companies followed by the candidate.
     */
    followedCompaniesCount: number;
    /**
     * Total number of jobs the candidate has applied to.
     */
    appliedJobsCount: number;
    /**
     * Number of job applications where the candidate was shortlisted.
     */
    shortlistedJobsCount: number;
};

export type CandidateGeneralInfoDto = {
    /**
     * First name of the candidate
     */
    firstName: string;
    /**
     * Middle name of the candidate
     */
    middleName?: string;
    /**
     * Last name of the candidate
     */
    lastName: string;
    /**
     * Professional title (e.g., Software Engineer)
     */
    title: string;
    /**
     * Short introduction or bio of the candidate
     */
    intro?: string;
    /**
     * Summary of the candidate
     */
    summary?: string;
};

export type CandidatePersonalInfoDto = {
    /**
     * Nationality ID (MongoDB ObjectId)
     */
    nationalityId?: string;
    /**
     * Gender ID (MongoDB ObjectId)
     */
    genderId?: string;
    /**
     * Date of birth in YYYY-MM-DD format
     */
    dob: string;
    /**
     * Military status ID (MongoDB ObjectId)
     */
    militaryStatusId?: string;
    /**
     * Marital status ID (MongoDB ObjectId)
     */
    maritalStatusId?: string;
};

export type CandidateLocationInfoDto = {
    /**
     * Country ID (MongoDB ObjectId)
     */
    countryId?: string;
    /**
     * State ID (MongoDB ObjectId)
     */
    stateId?: string;
    /**
     * City ID (MongoDB ObjectId)
     */
    cityId?: string;
    /**
     * Street Address of the candidate
     */
    streetAddress?: string;
    /**
     * Building Address of the candidate
     */
    buildingAddress?: string;
    /**
     * Area Address of the candidate
     */
    areaAddress?: string;
    /**
     * Ready to relocate? (true / false)
     */
    relocate?: boolean;
};

export type CandidateContactInfoDto = {
    /**
     * Secondary email of the candidate
     */
    secondaryEmail?: string;
    /**
     * Phone number of the candidate
     */
    phone?: string;
    /**
     * Mobile number of the candidate
     */
    mobile?: string;
    /**
     * Whatsapp number of the candidate
     */
    whatsapp?: string;
};

export type CandidateProfileInfoDto = {
    /**
     * Basic general info of Candidate
     */
    generalInfo?: CandidateGeneralInfoDto;
    /**
     * Personal info of Candidate
     */
    personalInfo?: CandidatePersonalInfoDto;
    /**
     * Location info of Candidate
     */
    locationInfo?: CandidateLocationInfoDto;
    /**
     * Contact info of Candidate
     */
    contactInfo?: CandidateContactInfoDto;
    /**
     * Intro video link of the candidate.
     */
    video?: string;
    /**
     * Profile Image link of the candidate.
     */
    profileImage?: string;
    /**
     * Profile Banner / Cover Image link of the candidate.
     */
    profilePhoto?: string;
    /**
     * Immediate Available property of the candidate.
     */
    immediateAvailable?: boolean;
    /**
     * Is the candidate a verified candidate?
     */
    approved?: boolean;
};

export type CompletionScoreData = {
    /**
     * Profile completion score percentage (0–100)
     */
    score: number;
};

export type CompletionScoreResponseDto = {
    status: string;
    data: CompletionScoreData;
};

export type CreateCandidateLanguageDto = {
    language: string;
    level: 'Native' | 'Professional' | 'Intermediate' | 'Basic';
};

export type ApplyJobDto = {
    jobId: string;
};

export type ProfileCompletionDto = {
    /**
     * Whether CV is completed
     */
    CV: boolean;
    /**
     * Whether skills are completed
     */
    skills: boolean;
    /**
     * Whether work experiences are completed
     */
    workExperiences: boolean;
    /**
     * Whether summary is completed
     */
    summary: boolean;
};

export type CandidateDashboardSummaryResponseDto = {
    /**
     * Total number of job applications
     */
    applicationsCount: number;
    /**
     * Total number of saved/favourite jobs
     */
    savedJobsCount: number;
    /**
     * Total number of profile views
     */
    profileViewsCount: number;
    /**
     * Profile completion status for different sections
     */
    profileCompletion: ProfileCompletionDto;
    /**
     * List of recommended jobs for the candidate
     */
    jobRecommendations: Array<Job>;
    /**
     * Total number of job invitations
     */
    jobInvitationsCount: number;
    /**
     * Total number of interview invitations
     */
    interviewInvitationsCount: number;
};

export type ProfileStatsResponseDto = {
    /**
     * Total number of job applications submitted by the candidate
     */
    applications: number;
    /**
     * Total number of skills associated with the candidate profile
     */
    skills: number;
    /**
     * Total number of education entries in the candidate profile
     */
    education: number;
    /**
     * Total number of education entries in the candidate profile
     */
    experience: number;
};

export type CreateExperienceDto = {
    /**
     * Title of the experience
     */
    title: string;
    /**
     * Company name
     */
    company: string;
    /**
     * Country ID (MongoDB ObjectId)
     */
    countryId?: string;
    /**
     * State ID (MongoDB ObjectId)
     */
    stateId?: string;
    /**
     * City ID (MongoDB ObjectId)
     */
    cityId?: string;
    /**
     * Job Type ID (MongoDB ObjectId)
     */
    jobTypeId: string;
    /**
     * Job Workplace
     */
    jobWorkplace: 'REMOTE' | 'HYBRID' | 'ONSITE';
    /**
     * Description of the role
     */
    description?: string;
    /**
     * Start date of employment (YYYY-MM-DD)
     */
    from: string;
    /**
     * End date of employment (YYYY-MM-DD)
     */
    to?: string;
    /**
     * Is the user currently working here?
     */
    currentlyWorking: boolean;
};

export type UpdateExperienceDto = {
    /**
     * Title of the experience
     */
    title?: string;
    /**
     * Company name
     */
    company?: string;
    /**
     * Country ID (MongoDB ObjectId)
     */
    countryId?: string;
    /**
     * State ID (MongoDB ObjectId)
     */
    stateId?: string;
    /**
     * City ID (MongoDB ObjectId)
     */
    cityId?: string;
    /**
     * Job Type ID (MongoDB ObjectId)
     */
    jobTypeId?: string;
    /**
     * Job Workplace
     */
    jobWorkplace?: 'REMOTE' | 'HYBRID' | 'ONSITE';
    /**
     * Description of the role
     */
    description?: string;
    /**
     * Start date of employment (YYYY-MM-DD)
     */
    from?: string;
    /**
     * End date of employment (YYYY-MM-DD)
     */
    to?: string;
    /**
     * Is the user currently working here?
     */
    currentlyWorking?: boolean;
};

export type EducationAttachmentDto = {
    name: string;
    file: string;
};

export type CreateEducationDto = {
    /**
     * The title of the degree (e.g., Bachelor of Science)
     */
    degree_title: string;
    /**
     * The name of the institution where the degree was obtained.
     */
    institution: string;
    /**
     * The MongoDB ID of the degree level (e.g., Bachelor, Master)
     */
    degreeLevelId: string;
    /**
     * The MongoDB ID of the degree type (e.g., Full-time, Part-time)
     */
    degreeTypeId: string;
    /**
     * The start date of the degree program (format: YYYY-MM-DD).
     */
    from: string;
    /**
     * The end date of the degree program (format: YYYY-MM-DD). Leave blank if ongoing is true.
     */
    to?: string;
    /**
     * Whether the degree program is ongoing or compelted (true/false).
     */
    isOngoing: boolean;
    /**
     * The result or grade of the degree as a percentage (0-100). Leave blank if not available.
     */
    degree_result?: number;
    /**
     * A short description of the degree or the program.
     */
    description?: string;
    /**
     * List of project attachments
     */
    attachments?: Array<EducationAttachmentDto>;
};

export type UpdateEducationDto = {
    /**
     * The title of the degree (e.g., Bachelor of Science)
     */
    degree_title?: string;
    /**
     * The name of the institution where the degree was obtained.
     */
    institution?: string;
    /**
     * The MongoDB ID of the degree level (e.g., Bachelor, Master)
     */
    degreeLevelId?: string;
    /**
     * The MongoDB ID of the degree type (e.g., Full-time, Part-time)
     */
    degreeTypeId?: string;
    /**
     * The start date of the degree program (format: YYYY-MM-DD).
     */
    from?: string;
    /**
     * The end date of the degree program (format: YYYY-MM-DD). Leave blank if ongoing is true.
     */
    to?: string;
    /**
     * Whether the degree program is ongoing or compelted (true/false).
     */
    isOngoing?: boolean;
    /**
     * The result or grade of the degree as a percentage (0-100). Leave blank if not available.
     */
    degree_result?: number;
    /**
     * A short description of the degree or the program.
     */
    description?: string;
    /**
     * List of project attachments
     */
    attachments?: Array<EducationAttachmentDto>;
};

export type CreateSkillDto = {
    /**
     * Name of the skill (predefined or custom)
     */
    name: string;
    /**
     * Skill proficiency in percentage (0–100)
     */
    percentage?: number;
    /**
     * Number of years of experience with the skill
     */
    yearsOfExperience?: number;
};

export type UpdateSkillDto = {
    /**
     * Skill proficiency in percentage (0–100)
     */
    percentage: number;
    /**
     * Number of years of experience with the skill
     */
    yearsOfExperience: number;
};

export type AttachmentDto = {
    name: string;
    file: string;
};

export type CreateProjectDto = {
    name: string;
    company: string;
    startDate: string;
    url?: string;
    description?: string;
    /**
     * List of project attachments
     */
    attachments?: Array<AttachmentDto>;
};

export type UpdateProjectDto = {
    name?: string;
    company?: string;
    startDate?: string;
    url?: string;
    description?: string;
    /**
     * List of project attachments
     */
    attachments?: Array<AttachmentDto>;
};

export type SaveJobDto = {
    jobId: string;
};

export type CreateCvDto = {
    /**
     * The name of the uploaded cv.
     */
    name: string;
    /**
     * The file name of the uploaded cv.
     */
    file: string;
};

export type CreateUserNotificationSettingsDto = {
    /**
     * Receive job suggestions notifications
     */
    jobSuggestions?: boolean;
    jobSuggestionsFrequency?: 'daily' | 'weekly' | 'fortnightly' | 'monthly';
    /**
     * Notification for saved jobs not yet applied to
     */
    jobSaved?: boolean;
    jobSavedFrequency?: 'daily' | 'weekly' | 'fortnightly' | 'monthly';
    /**
     * Notifications for new job posts from followed employers
     */
    followJobPosts?: boolean;
    followJobPostsFrequency?: 'daily' | 'weekly' | 'fortnightly' | 'monthly';
    /**
     * Notification for incomplete job applications
     */
    jobApplicationIncomplete?: boolean;
    jobApplicationIncompleteFrequency?: 'daily' | 'weekly' | 'fortnightly' | 'monthly';
    /**
     * Notification for job application status updates
     */
    jobApplicationStatusUpdate?: boolean;
    /**
     * When an employer views the profile
     */
    profileViews?: boolean;
    /**
     * When an employer unlocks the profile
     */
    profileUnlocks?: boolean;
    /**
     * When an employer downloads the resume
     */
    resumeDownloads?: boolean;
    /**
     * Notification for Wazifame news & updates.
     */
    newsletter?: boolean;
    newsletterFrequency?: 'daily' | 'weekly' | 'fortnightly' | 'monthly';
};

export type CreateCareerInfoDto = {
    /**
     * Are you currently available for new positions?
     */
    isAvailable?: boolean;
    /**
     * How soon are you available to start?
     */
    availableFrequency?: AvailableFrequency;
    /**
     * ID of the career level
     */
    careerLevelId?: string;
    /**
     * Preferred work arrangement
     */
    workplace?: WorkplacePeriod;
    /**
     * ID of the Job Title (Functional Area)
     */
    functionalAreaId?: string | null;
    /**
     * ID of the Job Category
     */
    categoryId?: string;
    /**
     * ID of the preferred salary currency
     */
    salaryCurrencyId?: string | null;
    /**
     * Is the candidate open to student roles?
     */
    openToStudent?: boolean;
    /**
     * Is the candidate open to volunteering roles?
     */
    openToVolunteering?: boolean;
    /**
     * Is the candidate open to internship roles?
     */
    openToInternship?: boolean;
    /**
     * Is the candidate open to part-time roles?
     */
    openToPartTime?: boolean;
    /**
     * Expected salary for part-time roles (in smallest currency unit, e.g., cents)
     */
    partTimeExpectedSalary?: number;
    /**
     * Is the candidate open to full-time roles?
     */
    openToFullTime?: boolean;
    /**
     * Expected salary for full-time roles (in smallest currency unit, e.g., cents)
     */
    fullTimeExpectedSalary?: number;
    /**
     * Should salary be visible to employer?
     */
    showSalary?: boolean;
};

export type CompanyCreateDto = {
    companyLogo?: string;
    companyName?: string;
    email?: string;
    password?: string;
    ceo?: string;
    industryId?: string;
    ownershipTypeId?: string;
    description?: string;
    address?: string;
    countryId?: string;
    stateId?: string;
    cityId?: string;
    noOfEmployees?: string;
    webUrl?: string;
    fax?: string;
    phone?: string;
    contactPerson?: string;
    contact?: string;
    year?: string;
    customIndustry?: string;
    planId?: string;
    planDuration?: SubscriptionDuration;
};

export type SubscriptionUpdateDto = {
    planId?: string;
    duration?: {
        [key: string]: unknown;
    };
};

export type UserUpdateDto = {
    id?: string;
    firstName?: string;
    email?: string;
    password?: string;
    image?: string;
    coverImage?: string;
    videoLink?: string;
    role?: string;
    lang?: string;
    isSubscribed?: boolean;
    provider?: string;
    isEmailVerified?: boolean;
    verified?: boolean;
    subscriptionId?: string;
    chatroomsIds?: Array<string>;
    idOld?: number;
    isActive?: boolean;
    immediateAvailable?: boolean;
    hideName?: boolean;
    EmployerId?: string;
    notificationPeriod?: string;
    lastNotifiedAt?: string;
    archived?: boolean;
    isMainAccount?: boolean;
    subAccountType?: string;
    subscription?: SubscriptionUpdateDto;
};

export type CompanyUpdateDto = {
    userId?: string;
    companyLogo?: string;
    companyName?: string;
    ceo?: string;
    industryId?: string;
    ownershipTypeId?: string;
    otherOwnershipTypeId?: string;
    description?: string;
    address?: string;
    noOfEmployees?: string;
    year?: number;
    establishedMonth?: string;
    establishedDay?: string;
    webUrl?: string;
    fax?: string;
    phone?: string;
    fb?: string;
    twitter?: string;
    linkedIn?: string;
    googlePlus?: string;
    pinterest?: string;
    countryId?: string;
    stateId?: string;
    customState?: string;
    cityId?: string;
    customCity?: string;
    customIndustry?: string;
    contactPerson?: string;
    responsiblePerson?: string;
    contactEmail?: string;
    approved?: boolean;
    submittedForApproval?: boolean;
    contact?: string;
    subscribeToNewsletter?: string;
    type?: Type;
    archived?: boolean;
    facebookUrl?: string;
    instagramUrl?: string;
    linkedinUrl?: string;
    building?: string;
    area?: string;
    video?: string;
    coverImage?: string;
    preferredLanguage?: string;
    createdAt?: string;
    updatedAt?: string;
    user?: UserUpdateDto;
    planDuration?: SubscriptionDuration;
    planId?: string;
};

export type CreateJobDto = {
    title: string;
    description: string;
    location: string;
    type: 'full-time' | 'part-time' | 'contract';
    salaryFrom?: number;
    salaryTo?: number;
};

export type UpdateJobDto = {
    title?: string;
    description?: string;
    location?: string;
    type?: 'full-time' | 'part-time' | 'contract';
    salaryFrom?: number;
    salaryTo?: number;
};

export type AdminDashboardResponseDto = {
    /**
     * Total number of job applications
     */
    totalJobsApplications: number;
    /**
     * Number of shortlisted job applications
     */
    shortlistedJobsApplications: number;
    /**
     * Number of accepted job applications
     */
    acceptedJobsApplications: number;
    /**
     * Number of rejected job applications
     */
    rejectedJobsApplications: number;
};

export type AppControllerGetRootData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type AppControllerGetRootResponses = {
    200: unknown;
};

export type AppControllerGetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type AppControllerGetHealthErrors = {
    /**
     * Database is not accessible
     */
    503: unknown;
};

export type AppControllerGetHealthResponses = {
    /**
     * Database is accessible
     */
    200: unknown;
};

export type AppControllerEmployerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/employer';
};

export type AppControllerEmployerResponses = {
    200: unknown;
};

export type AppControllerCandidateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate';
};

export type AppControllerCandidateResponses = {
    200: unknown;
};

export type AppControllerGetErrorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/debug-sentry';
};

export type AppControllerGetErrorResponses = {
    200: unknown;
};

export type AppControllerGetAsyncErrorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/debug-sentry/async-error';
};

export type AppControllerGetAsyncErrorResponses = {
    200: unknown;
};

export type AppControllerGetCustomMessageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/debug-sentry/custom-message';
};

export type AppControllerGetCustomMessageResponses = {
    200: unknown;
};

export type AppControllerGetUserContextErrorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/debug-sentry/user-context';
};

export type AppControllerGetUserContextErrorResponses = {
    200: unknown;
};

export type AppControllerGetSimpleErrorData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/debug-sentry/simple';
};

export type AppControllerGetSimpleErrorResponses = {
    200: unknown;
};

export type AppControllerGetCustomErrorsData = {
    body?: never;
    path?: never;
    query: {
        type: string;
    };
    url: '/debug-sentry/custom-errors';
};

export type AppControllerGetCustomErrorsResponses = {
    200: unknown;
};

export type AuthControllerGetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type AuthControllerGetProfileErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerGetProfileError = AuthControllerGetProfileErrors[keyof AuthControllerGetProfileErrors];

export type AuthControllerGetProfileResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerGetProfileResponse = AuthControllerGetProfileResponses[keyof AuthControllerGetProfileResponses];

export type AuthControllerLoginData = {
    body: LoginDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthControllerLoginErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerLoginError = AuthControllerLoginErrors[keyof AuthControllerLoginErrors];

export type AuthControllerLoginResponses = {
    /**
     * Success
     */
    201: {
        status?: 'success' | 'error';
        data?: LoginResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerRegisterData = {
    body: RegisterDto;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type AuthControllerRegisterErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerRegisterError = AuthControllerRegisterErrors[keyof AuthControllerRegisterErrors];

export type AuthControllerRegisterResponses = {
    /**
     * Success
     */
    201: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerRegisterResponse = AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses];

export type AuthControllerActivateData = {
    body: ActivateDto;
    path?: never;
    query?: never;
    url: '/auth/activate';
};

export type AuthControllerActivateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerActivateError = AuthControllerActivateErrors[keyof AuthControllerActivateErrors];

export type AuthControllerActivateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type AuthControllerActivateResponse = AuthControllerActivateResponses[keyof AuthControllerActivateResponses];

export type AuthControllerForgetPasswordData = {
    body: ForgetPasswordDto;
    path?: never;
    query?: never;
    url: '/auth/forget-password';
};

export type AuthControllerForgetPasswordErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerForgetPasswordError = AuthControllerForgetPasswordErrors[keyof AuthControllerForgetPasswordErrors];

export type AuthControllerForgetPasswordResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type AuthControllerForgetPasswordResponse = AuthControllerForgetPasswordResponses[keyof AuthControllerForgetPasswordResponses];

export type AuthControllerResetPasswordData = {
    body: ResetPasswordDto;
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type AuthControllerResetPasswordErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerResetPasswordError = AuthControllerResetPasswordErrors[keyof AuthControllerResetPasswordErrors];

export type AuthControllerResetPasswordResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type AuthControllerResetPasswordResponse = AuthControllerResetPasswordResponses[keyof AuthControllerResetPasswordResponses];

export type AuthControllerUpdateEmailData = {
    body: EmailDto;
    path?: never;
    query?: never;
    url: '/auth/update-email';
};

export type AuthControllerUpdateEmailErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerUpdateEmailError = AuthControllerUpdateEmailErrors[keyof AuthControllerUpdateEmailErrors];

export type AuthControllerUpdateEmailResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerUpdateEmailResponse = AuthControllerUpdateEmailResponses[keyof AuthControllerUpdateEmailResponses];

export type AuthControllerUpdatePasswordData = {
    body: PasswordDto;
    path?: never;
    query?: never;
    url: '/auth/update-password';
};

export type AuthControllerUpdatePasswordErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerUpdatePasswordError = AuthControllerUpdatePasswordErrors[keyof AuthControllerUpdatePasswordErrors];

export type AuthControllerUpdatePasswordResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerUpdatePasswordResponse = AuthControllerUpdatePasswordResponses[keyof AuthControllerUpdatePasswordResponses];

export type AuthControllerDeactivateAccountData = {
    body: EmailDto;
    path?: never;
    query?: never;
    url: '/auth/deactivate';
};

export type AuthControllerDeactivateAccountErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AuthControllerDeactivateAccountError = AuthControllerDeactivateAccountErrors[keyof AuthControllerDeactivateAccountErrors];

export type AuthControllerDeactivateAccountResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AuthControllerDeactivateAccountResponse = AuthControllerDeactivateAccountResponses[keyof AuthControllerDeactivateAccountResponses];

export type AuthControllerLinkedinAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/linkedin';
};

export type AuthControllerLinkedinAuthResponses = {
    200: unknown;
};

export type AuthControllerLinkedinAuthRedirectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/linkedin/callback';
};

export type AuthControllerLinkedinAuthRedirectResponses = {
    200: unknown;
};

export type AuthControllerGoogleAuthData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The role type for user registration during Google OAuth
         */
        userType?: 'EMPLOYER' | 'CANDIDATE';
        /**
         * Whether this is a registration or login flow
         */
        type?: 'register' | 'login';
    };
    url: '/auth/google';
};

export type AuthControllerGoogleAuthResponses = {
    200: unknown;
};

export type AuthControllerGoogleAuthRedirectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/google/callback';
};

export type AuthControllerGoogleAuthRedirectResponses = {
    200: unknown;
};

export type CandidatesControllerGetCandidateStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/statistics';
};

export type CandidatesControllerGetCandidateStatisticsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetCandidateStatisticsError = CandidatesControllerGetCandidateStatisticsErrors[keyof CandidatesControllerGetCandidateStatisticsErrors];

export type CandidatesControllerGetCandidateStatisticsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CandidateStatisticsResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetCandidateStatisticsResponse = CandidatesControllerGetCandidateStatisticsResponses[keyof CandidatesControllerGetCandidateStatisticsResponses];

export type CandidatesControllerGetPersonalInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/info';
};

export type CandidatesControllerGetPersonalInfoErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetPersonalInfoError = CandidatesControllerGetPersonalInfoErrors[keyof CandidatesControllerGetPersonalInfoErrors];

export type CandidatesControllerGetPersonalInfoResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetPersonalInfoResponse = CandidatesControllerGetPersonalInfoResponses[keyof CandidatesControllerGetPersonalInfoResponses];

export type CandidatesControllerUpdatePersonalInfoData = {
    body: CandidateProfileInfoDto;
    path?: never;
    query?: never;
    url: '/candidate/info';
};

export type CandidatesControllerUpdatePersonalInfoErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerUpdatePersonalInfoError = CandidatesControllerUpdatePersonalInfoErrors[keyof CandidatesControllerUpdatePersonalInfoErrors];

export type CandidatesControllerUpdatePersonalInfoResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: User;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerUpdatePersonalInfoResponse = CandidatesControllerUpdatePersonalInfoResponses[keyof CandidatesControllerUpdatePersonalInfoResponses];

export type CandidatesControllerGetProfileCompletionScoreData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/completion-score';
};

export type CandidatesControllerGetProfileCompletionScoreErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetProfileCompletionScoreError = CandidatesControllerGetProfileCompletionScoreErrors[keyof CandidatesControllerGetProfileCompletionScoreErrors];

export type CandidatesControllerGetProfileCompletionScoreResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CompletionScoreResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetProfileCompletionScoreResponse = CandidatesControllerGetProfileCompletionScoreResponses[keyof CandidatesControllerGetProfileCompletionScoreResponses];

export type CandidatesControllerGetLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/languages';
};

export type CandidatesControllerGetLanguagesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetLanguagesError = CandidatesControllerGetLanguagesErrors[keyof CandidatesControllerGetLanguagesErrors];

export type CandidatesControllerGetLanguagesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<ManageLanguage>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetLanguagesResponse = CandidatesControllerGetLanguagesResponses[keyof CandidatesControllerGetLanguagesResponses];

export type CandidatesControllerAddLanguageData = {
    body: CreateCandidateLanguageDto;
    path?: never;
    query?: never;
    url: '/candidate/languages';
};

export type CandidatesControllerAddLanguageErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerAddLanguageError = CandidatesControllerAddLanguageErrors[keyof CandidatesControllerAddLanguageErrors];

export type CandidatesControllerAddLanguageResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: ManageLanguage;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type CandidatesControllerAddLanguageResponse = CandidatesControllerAddLanguageResponses[keyof CandidatesControllerAddLanguageResponses];

export type CandidatesControllerRemoveLanguageData = {
    body?: never;
    path: {
        /**
         * Language name to remove
         */
        language: string;
    };
    query?: never;
    url: '/candidate/languages/{language}';
};

export type CandidatesControllerRemoveLanguageErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerRemoveLanguageError = CandidatesControllerRemoveLanguageErrors[keyof CandidatesControllerRemoveLanguageErrors];

export type CandidatesControllerRemoveLanguageResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerRemoveLanguageResponse = CandidatesControllerRemoveLanguageResponses[keyof CandidatesControllerRemoveLanguageResponses];

export type CandidatesControllerApplyToJobData = {
    body: ApplyJobDto;
    path?: never;
    query?: never;
    url: '/candidate/apply';
};

export type CandidatesControllerApplyToJobErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerApplyToJobError = CandidatesControllerApplyToJobErrors[keyof CandidatesControllerApplyToJobErrors];

export type CandidatesControllerApplyToJobResponses = {
    /**
     * Success
     */
    201: {
        status?: 'success' | 'error';
        data?: JobApplication;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerApplyToJobResponse = CandidatesControllerApplyToJobResponses[keyof CandidatesControllerApplyToJobResponses];

export type CandidatesControllerGetDashboardSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/dashboard-summary';
};

export type CandidatesControllerGetDashboardSummaryErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetDashboardSummaryError = CandidatesControllerGetDashboardSummaryErrors[keyof CandidatesControllerGetDashboardSummaryErrors];

export type CandidatesControllerGetDashboardSummaryResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CandidateDashboardSummaryResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetDashboardSummaryResponse = CandidatesControllerGetDashboardSummaryResponses[keyof CandidatesControllerGetDashboardSummaryResponses];

export type CandidatesControllerGetProfileStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/profile-stats';
};

export type CandidatesControllerGetProfileStatsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidatesControllerGetProfileStatsError = CandidatesControllerGetProfileStatsErrors[keyof CandidatesControllerGetProfileStatsErrors];

export type CandidatesControllerGetProfileStatsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: ProfileStatsResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidatesControllerGetProfileStatsResponse = CandidatesControllerGetProfileStatsResponses[keyof CandidatesControllerGetProfileStatsResponses];

export type CandidateExperiencesControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/experiences';
};

export type CandidateExperiencesControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateExperiencesControllerFindAllError = CandidateExperiencesControllerFindAllErrors[keyof CandidateExperiencesControllerFindAllErrors];

export type CandidateExperiencesControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<UserExperience>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateExperiencesControllerFindAllResponse = CandidateExperiencesControllerFindAllResponses[keyof CandidateExperiencesControllerFindAllResponses];

export type CandidateExperiencesControllerCreateData = {
    body: CreateExperienceDto;
    path?: never;
    query?: never;
    url: '/candidate/experiences';
};

export type CandidateExperiencesControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateExperiencesControllerCreateError = CandidateExperiencesControllerCreateErrors[keyof CandidateExperiencesControllerCreateErrors];

export type CandidateExperiencesControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: UserExperience;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: {
        [key: string]: unknown;
    };
};

export type CandidateExperiencesControllerCreateResponse = CandidateExperiencesControllerCreateResponses[keyof CandidateExperiencesControllerCreateResponses];

export type CandidateExperiencesControllerRemoveData = {
    body?: never;
    path: {
        /**
         * User Experience ID
         */
        id: string;
    };
    query?: never;
    url: '/candidate/experiences/{id}';
};

export type CandidateExperiencesControllerRemoveErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateExperiencesControllerRemoveError = CandidateExperiencesControllerRemoveErrors[keyof CandidateExperiencesControllerRemoveErrors];

export type CandidateExperiencesControllerRemoveResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateExperiencesControllerRemoveResponse = CandidateExperiencesControllerRemoveResponses[keyof CandidateExperiencesControllerRemoveResponses];

export type CandidateExperiencesControllerFindByIdData = {
    body?: never;
    path: {
        /**
         * User Experience ID
         */
        id: string;
    };
    query?: never;
    url: '/candidate/experiences/{id}';
};

export type CandidateExperiencesControllerFindByIdErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateExperiencesControllerFindByIdError = CandidateExperiencesControllerFindByIdErrors[keyof CandidateExperiencesControllerFindByIdErrors];

export type CandidateExperiencesControllerFindByIdResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: UserExperience;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateExperiencesControllerFindByIdResponse = CandidateExperiencesControllerFindByIdResponses[keyof CandidateExperiencesControllerFindByIdResponses];

export type CandidateExperiencesControllerUpdateData = {
    body: UpdateExperienceDto;
    path: {
        /**
         * User Experience ID
         */
        id: string;
    };
    query?: never;
    url: '/candidate/experiences/{id}';
};

export type CandidateExperiencesControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateExperiencesControllerUpdateError = CandidateExperiencesControllerUpdateErrors[keyof CandidateExperiencesControllerUpdateErrors];

export type CandidateExperiencesControllerUpdateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: UserExperience;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateExperiencesControllerUpdateResponse = CandidateExperiencesControllerUpdateResponses[keyof CandidateExperiencesControllerUpdateResponses];

export type CandidateEducationsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/educations';
};

export type CandidateEducationsControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateEducationsControllerFindAllError = CandidateEducationsControllerFindAllErrors[keyof CandidateEducationsControllerFindAllErrors];

export type CandidateEducationsControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Education>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateEducationsControllerFindAllResponse = CandidateEducationsControllerFindAllResponses[keyof CandidateEducationsControllerFindAllResponses];

export type CandidateEducationsControllerCreateData = {
    body: CreateEducationDto;
    path?: never;
    query?: never;
    url: '/candidate/educations';
};

export type CandidateEducationsControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateEducationsControllerCreateError = CandidateEducationsControllerCreateErrors[keyof CandidateEducationsControllerCreateErrors];

export type CandidateEducationsControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Education;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type CandidateEducationsControllerCreateResponse = CandidateEducationsControllerCreateResponses[keyof CandidateEducationsControllerCreateResponses];

export type CandidateEducationsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/educations/{id}';
};

export type CandidateEducationsControllerRemoveErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateEducationsControllerRemoveError = CandidateEducationsControllerRemoveErrors[keyof CandidateEducationsControllerRemoveErrors];

export type CandidateEducationsControllerRemoveResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateEducationsControllerRemoveResponse = CandidateEducationsControllerRemoveResponses[keyof CandidateEducationsControllerRemoveResponses];

export type CandidateEducationsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/educations/{id}';
};

export type CandidateEducationsControllerFindOneErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateEducationsControllerFindOneError = CandidateEducationsControllerFindOneErrors[keyof CandidateEducationsControllerFindOneErrors];

export type CandidateEducationsControllerFindOneResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Education;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateEducationsControllerFindOneResponse = CandidateEducationsControllerFindOneResponses[keyof CandidateEducationsControllerFindOneResponses];

export type CandidateEducationsControllerUpdateData = {
    body: UpdateEducationDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/educations/{id}';
};

export type CandidateEducationsControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateEducationsControllerUpdateError = CandidateEducationsControllerUpdateErrors[keyof CandidateEducationsControllerUpdateErrors];

export type CandidateEducationsControllerUpdateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Education;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateEducationsControllerUpdateResponse = CandidateEducationsControllerUpdateResponses[keyof CandidateEducationsControllerUpdateResponses];

export type CandidateSkillsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/skills';
};

export type CandidateSkillsControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateSkillsControllerFindAllError = CandidateSkillsControllerFindAllErrors[keyof CandidateSkillsControllerFindAllErrors];

export type CandidateSkillsControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<CandidateSkill>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateSkillsControllerFindAllResponse = CandidateSkillsControllerFindAllResponses[keyof CandidateSkillsControllerFindAllResponses];

export type CandidateSkillsControllerCreateData = {
    body: CreateSkillDto;
    path?: never;
    query?: never;
    url: '/candidate/skills';
};

export type CandidateSkillsControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateSkillsControllerCreateError = CandidateSkillsControllerCreateErrors[keyof CandidateSkillsControllerCreateErrors];

export type CandidateSkillsControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CandidateSkill;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: {
        [key: string]: unknown;
    };
};

export type CandidateSkillsControllerCreateResponse = CandidateSkillsControllerCreateResponses[keyof CandidateSkillsControllerCreateResponses];

export type CandidateSkillsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/skills/{id}';
};

export type CandidateSkillsControllerRemoveErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateSkillsControllerRemoveError = CandidateSkillsControllerRemoveErrors[keyof CandidateSkillsControllerRemoveErrors];

export type CandidateSkillsControllerRemoveResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateSkillsControllerRemoveResponse = CandidateSkillsControllerRemoveResponses[keyof CandidateSkillsControllerRemoveResponses];

export type CandidateSkillsControllerUpdateData = {
    body: UpdateSkillDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/skills/{id}';
};

export type CandidateSkillsControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateSkillsControllerUpdateError = CandidateSkillsControllerUpdateErrors[keyof CandidateSkillsControllerUpdateErrors];

export type CandidateSkillsControllerUpdateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CandidateSkill;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateSkillsControllerUpdateResponse = CandidateSkillsControllerUpdateResponses[keyof CandidateSkillsControllerUpdateResponses];

export type CandidateProjectsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/projects';
};

export type CandidateProjectsControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateProjectsControllerFindAllError = CandidateProjectsControllerFindAllErrors[keyof CandidateProjectsControllerFindAllErrors];

export type CandidateProjectsControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Project>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateProjectsControllerFindAllResponse = CandidateProjectsControllerFindAllResponses[keyof CandidateProjectsControllerFindAllResponses];

export type CandidateProjectsControllerCreateData = {
    body: CreateProjectDto;
    path?: never;
    query?: never;
    url: '/candidate/projects';
};

export type CandidateProjectsControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateProjectsControllerCreateError = CandidateProjectsControllerCreateErrors[keyof CandidateProjectsControllerCreateErrors];

export type CandidateProjectsControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Project;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: {
        [key: string]: unknown;
    };
};

export type CandidateProjectsControllerCreateResponse = CandidateProjectsControllerCreateResponses[keyof CandidateProjectsControllerCreateResponses];

export type CandidateProjectsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/projects/{id}';
};

export type CandidateProjectsControllerRemoveErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateProjectsControllerRemoveError = CandidateProjectsControllerRemoveErrors[keyof CandidateProjectsControllerRemoveErrors];

export type CandidateProjectsControllerRemoveResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateProjectsControllerRemoveResponse = CandidateProjectsControllerRemoveResponses[keyof CandidateProjectsControllerRemoveResponses];

export type CandidateProjectsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/projects/{id}';
};

export type CandidateProjectsControllerFindOneErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateProjectsControllerFindOneError = CandidateProjectsControllerFindOneErrors[keyof CandidateProjectsControllerFindOneErrors];

export type CandidateProjectsControllerFindOneResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Project;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateProjectsControllerFindOneResponse = CandidateProjectsControllerFindOneResponses[keyof CandidateProjectsControllerFindOneResponses];

export type CandidateProjectsControllerUpdateData = {
    body: UpdateProjectDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/projects/{id}';
};

export type CandidateProjectsControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateProjectsControllerUpdateError = CandidateProjectsControllerUpdateErrors[keyof CandidateProjectsControllerUpdateErrors];

export type CandidateProjectsControllerUpdateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Project;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateProjectsControllerUpdateResponse = CandidateProjectsControllerUpdateResponses[keyof CandidateProjectsControllerUpdateResponses];

export type CandidateJobsControllerFindAllData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Page number for pagination
         */
        page: number;
        /**
         * Number of items per page (1 - 100)
         */
        limit: number;
        /**
         * Status of the job application
         */
        status?: 'PENDING' | 'SHORTLISTED' | 'INTERVIEW' | 'ACCEPTED' | 'REJECTED' | 'ARCHIVED';
        /**
         * Filter by whether the job is currently active
         */
        jobIsActive?: boolean;
        /**
         * ID of the job category (MongoDB ObjectId)
         */
        categoryId?: string;
    };
    url: '/candidate/jobs/applications';
};

export type CandidateJobsControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateJobsControllerFindAllError = CandidateJobsControllerFindAllErrors[keyof CandidateJobsControllerFindAllErrors];

export type CandidateJobsControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<JobApplication>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateJobsControllerFindAllResponse = CandidateJobsControllerFindAllResponses[keyof CandidateJobsControllerFindAllResponses];

export type CandidateJobsControllerGetFavouriteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Page number for pagination
         */
        page: number;
        /**
         * Number of items per page (1 - 100)
         */
        limit: number;
    };
    url: '/candidate/jobs/favourite';
};

export type CandidateJobsControllerGetFavouriteErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateJobsControllerGetFavouriteError = CandidateJobsControllerGetFavouriteErrors[keyof CandidateJobsControllerGetFavouriteErrors];

export type CandidateJobsControllerGetFavouriteResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<FavouriteJob>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateJobsControllerGetFavouriteResponse = CandidateJobsControllerGetFavouriteResponses[keyof CandidateJobsControllerGetFavouriteResponses];

export type CandidateJobsControllerGetSimilarJobsData = {
    body?: never;
    path?: never;
    query: {
        jobId: string;
        skillIds?: Array<string>;
    };
    url: '/candidate/jobs/similar';
};

export type CandidateJobsControllerGetSimilarJobsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateJobsControllerGetSimilarJobsError = CandidateJobsControllerGetSimilarJobsErrors[keyof CandidateJobsControllerGetSimilarJobsErrors];

export type CandidateJobsControllerGetSimilarJobsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<JobApplication>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateJobsControllerGetSimilarJobsResponse = CandidateJobsControllerGetSimilarJobsResponses[keyof CandidateJobsControllerGetSimilarJobsResponses];

export type CandidateJobsControllerSaveJobData = {
    body: SaveJobDto;
    path?: never;
    query?: never;
    url: '/candidate/jobs/save';
};

export type CandidateJobsControllerSaveJobErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateJobsControllerSaveJobError = CandidateJobsControllerSaveJobErrors[keyof CandidateJobsControllerSaveJobErrors];

export type CandidateJobsControllerSaveJobResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: FavouriteJob;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type CandidateJobsControllerSaveJobResponse = CandidateJobsControllerSaveJobResponses[keyof CandidateJobsControllerSaveJobResponses];

export type CandidateJobsControllerGetJobDetailsData = {
    body?: never;
    path: {
        jobId: string;
    };
    query?: never;
    url: '/candidate/jobs/{jobId}';
};

export type CandidateJobsControllerGetJobDetailsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateJobsControllerGetJobDetailsError = CandidateJobsControllerGetJobDetailsErrors[keyof CandidateJobsControllerGetJobDetailsErrors];

export type CandidateJobsControllerGetJobDetailsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Job;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateJobsControllerGetJobDetailsResponse = CandidateJobsControllerGetJobDetailsResponses[keyof CandidateJobsControllerGetJobDetailsResponses];

export type FollowingsControllerGetFavouriteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/candidate/followings';
};

export type FollowingsControllerGetFavouriteErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type FollowingsControllerGetFavouriteError = FollowingsControllerGetFavouriteErrors[keyof FollowingsControllerGetFavouriteErrors];

export type FollowingsControllerGetFavouriteResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Follow>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type FollowingsControllerGetFavouriteResponse = FollowingsControllerGetFavouriteResponses[keyof FollowingsControllerGetFavouriteResponses];

export type CvsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/cvs';
};

export type CvsControllerFindAllErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CvsControllerFindAllError = CvsControllerFindAllErrors[keyof CvsControllerFindAllErrors];

export type CvsControllerFindAllResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Cv>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CvsControllerFindAllResponse = CvsControllerFindAllResponses[keyof CvsControllerFindAllResponses];

export type CvsControllerCreateData = {
    body: CreateCvDto;
    path?: never;
    query?: never;
    url: '/candidate/cvs';
};

export type CvsControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CvsControllerCreateError = CvsControllerCreateErrors[keyof CvsControllerCreateErrors];

export type CvsControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Cv;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type CvsControllerCreateResponse = CvsControllerCreateResponses[keyof CvsControllerCreateResponses];

export type CvsControllerGetCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/cvs/count';
};

export type CvsControllerGetCountErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CvsControllerGetCountError = CvsControllerGetCountErrors[keyof CvsControllerGetCountErrors];

export type CvsControllerGetCountResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: number;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CvsControllerGetCountResponse = CvsControllerGetCountResponses[keyof CvsControllerGetCountResponses];

export type CvsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/candidate/cvs/{id}';
};

export type CvsControllerRemoveErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CvsControllerRemoveError = CvsControllerRemoveErrors[keyof CvsControllerRemoveErrors];

export type CvsControllerRemoveResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: string;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CvsControllerRemoveResponse = CvsControllerRemoveResponses[keyof CvsControllerRemoveResponses];

export type CandidateNotificationsControllerFindData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/notifications';
};

export type CandidateNotificationsControllerFindErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateNotificationsControllerFindError = CandidateNotificationsControllerFindErrors[keyof CandidateNotificationsControllerFindErrors];

export type CandidateNotificationsControllerFindResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: UserNotificationSettings;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateNotificationsControllerFindResponse = CandidateNotificationsControllerFindResponses[keyof CandidateNotificationsControllerFindResponses];

export type CandidateNotificationsControllerCreateData = {
    body: CreateUserNotificationSettingsDto;
    path?: never;
    query?: never;
    url: '/candidate/notifications';
};

export type CandidateNotificationsControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateNotificationsControllerCreateError = CandidateNotificationsControllerCreateErrors[keyof CandidateNotificationsControllerCreateErrors];

export type CandidateNotificationsControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: UserNotificationSettings;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: {
        [key: string]: unknown;
    };
};

export type CandidateNotificationsControllerCreateResponse = CandidateNotificationsControllerCreateResponses[keyof CandidateNotificationsControllerCreateResponses];

export type CandidateCareerInfoControllerFindData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidate/career-info';
};

export type CandidateCareerInfoControllerFindErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateCareerInfoControllerFindError = CandidateCareerInfoControllerFindErrors[keyof CandidateCareerInfoControllerFindErrors];

export type CandidateCareerInfoControllerFindResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CareerInfo;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CandidateCareerInfoControllerFindResponse = CandidateCareerInfoControllerFindResponses[keyof CandidateCareerInfoControllerFindResponses];

export type CandidateCareerInfoControllerCreateData = {
    body: CreateCareerInfoDto;
    path?: never;
    query?: never;
    url: '/candidate/career-info';
};

export type CandidateCareerInfoControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CandidateCareerInfoControllerCreateError = CandidateCareerInfoControllerCreateErrors[keyof CandidateCareerInfoControllerCreateErrors];

export type CandidateCareerInfoControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: CareerInfo;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: unknown;
};

export type CandidateCareerInfoControllerCreateResponse = CandidateCareerInfoControllerCreateResponses[keyof CandidateCareerInfoControllerCreateResponses];

export type JobsControllerGetRecommendedJobsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        wazifameAccountId?: string;
        datePosted?: string;
        search?: string;
        keyword?: string;
        employerId?: string;
        country?: Array<string>;
        category?: Array<string>;
        state?: Array<string>;
        city?: Array<string>;
        jobExperience?: Array<string>;
        jobType?: Array<string>;
        jobShift?: Array<string>;
        careerLevel?: Array<string>;
        degreeLevel?: Array<string>;
        gender?: Array<string>;
        salaryCurrency?: string;
        salaryFrom?: number;
        salaryTo?: number;
        functionalAreas?: Array<string>;
        limit?: number;
        page?: number;
        sort_by?: string;
        title?: string;
        remoteOnly?: boolean;
    };
    url: '/jobs/recommended/{userId}';
};

export type JobsControllerGetRecommendedJobsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type JobsControllerGetRecommendedJobsError = JobsControllerGetRecommendedJobsErrors[keyof JobsControllerGetRecommendedJobsErrors];

export type JobsControllerGetRecommendedJobsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Job>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type JobsControllerGetRecommendedJobsResponse = JobsControllerGetRecommendedJobsResponses[keyof JobsControllerGetRecommendedJobsResponses];

export type JobsControllerGetJobsData = {
    body?: never;
    path?: never;
    query?: {
        wazifameAccountId?: string;
        datePosted?: string;
        search?: string;
        keyword?: string;
        employerId?: string;
        country?: Array<string>;
        category?: Array<string>;
        state?: Array<string>;
        city?: Array<string>;
        jobExperience?: Array<string>;
        jobType?: Array<string>;
        jobShift?: Array<string>;
        careerLevel?: Array<string>;
        degreeLevel?: Array<string>;
        gender?: Array<string>;
        salaryCurrency?: string;
        salaryFrom?: number;
        salaryTo?: number;
        functionalAreas?: Array<string>;
        limit?: number;
        page?: number;
        sort_by?: string;
        title?: string;
        remoteOnly?: boolean;
    };
    url: '/jobs/all';
};

export type JobsControllerGetJobsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type JobsControllerGetJobsError = JobsControllerGetJobsErrors[keyof JobsControllerGetJobsErrors];

export type JobsControllerGetJobsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Job>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type JobsControllerGetJobsResponse = JobsControllerGetJobsResponses[keyof JobsControllerGetJobsResponses];

export type JobsControllerGetTrendingJobsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/jobs/trending-jobs';
};

export type JobsControllerGetTrendingJobsResponses = {
    200: unknown;
};

export type StaticDataControllerGetCountriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/countries';
};

export type StaticDataControllerGetCountriesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCountriesError = StaticDataControllerGetCountriesErrors[keyof StaticDataControllerGetCountriesErrors];

export type StaticDataControllerGetCountriesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Country>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCountriesResponse = StaticDataControllerGetCountriesResponses[keyof StaticDataControllerGetCountriesResponses];

export type StaticDataControllerGetCountriesWithQueryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search countries by name
         */
        query?: string;
    };
    url: '/static-data/countries/search';
};

export type StaticDataControllerGetCountriesWithQueryErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCountriesWithQueryError = StaticDataControllerGetCountriesWithQueryErrors[keyof StaticDataControllerGetCountriesWithQueryErrors];

export type StaticDataControllerGetCountriesWithQueryResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Country>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCountriesWithQueryResponse = StaticDataControllerGetCountriesWithQueryResponses[keyof StaticDataControllerGetCountriesWithQueryResponses];

export type StaticDataControllerGetStatesByCountryIdData = {
    body?: never;
    path: {
        countryId: string;
    };
    query?: never;
    url: '/static-data/countries/{countryId}/states';
};

export type StaticDataControllerGetStatesByCountryIdErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetStatesByCountryIdError = StaticDataControllerGetStatesByCountryIdErrors[keyof StaticDataControllerGetStatesByCountryIdErrors];

export type StaticDataControllerGetStatesByCountryIdResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<State>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetStatesByCountryIdResponse = StaticDataControllerGetStatesByCountryIdResponses[keyof StaticDataControllerGetStatesByCountryIdResponses];

export type StaticDataControllerGetCitiesByStateIdData = {
    body?: never;
    path: {
        stateId: string;
    };
    query?: never;
    url: '/static-data/states/{stateId}/cities';
};

export type StaticDataControllerGetCitiesByStateIdErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCitiesByStateIdError = StaticDataControllerGetCitiesByStateIdErrors[keyof StaticDataControllerGetCitiesByStateIdErrors];

export type StaticDataControllerGetCitiesByStateIdResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<City>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCitiesByStateIdResponse = StaticDataControllerGetCitiesByStateIdResponses[keyof StaticDataControllerGetCitiesByStateIdResponses];

export type StaticDataControllerGetCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/categories';
};

export type StaticDataControllerGetCategoriesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCategoriesError = StaticDataControllerGetCategoriesErrors[keyof StaticDataControllerGetCategoriesErrors];

export type StaticDataControllerGetCategoriesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Category>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCategoriesResponse = StaticDataControllerGetCategoriesResponses[keyof StaticDataControllerGetCategoriesResponses];

export type StaticDataControllerGetFunctionalAreasData = {
    body?: never;
    path: {
        categoryId: string;
    };
    query?: never;
    url: '/static-data/categories/{categoryId}/functional-areas';
};

export type StaticDataControllerGetFunctionalAreasErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetFunctionalAreasError = StaticDataControllerGetFunctionalAreasErrors[keyof StaticDataControllerGetFunctionalAreasErrors];

export type StaticDataControllerGetFunctionalAreasResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<FunctionalArea>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetFunctionalAreasResponse = StaticDataControllerGetFunctionalAreasResponses[keyof StaticDataControllerGetFunctionalAreasResponses];

export type StaticDataControllerGetFunctionalAreasWithQueryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search functional areas by name
         */
        query?: string;
    };
    url: '/static-data/functional-areas/search';
};

export type StaticDataControllerGetFunctionalAreasWithQueryErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetFunctionalAreasWithQueryError = StaticDataControllerGetFunctionalAreasWithQueryErrors[keyof StaticDataControllerGetFunctionalAreasWithQueryErrors];

export type StaticDataControllerGetFunctionalAreasWithQueryResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<FunctionalArea>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetFunctionalAreasWithQueryResponse = StaticDataControllerGetFunctionalAreasWithQueryResponses[keyof StaticDataControllerGetFunctionalAreasWithQueryResponses];

export type StaticDataControllerGetJobTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/job-types';
};

export type StaticDataControllerGetJobTypesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetJobTypesError = StaticDataControllerGetJobTypesErrors[keyof StaticDataControllerGetJobTypesErrors];

export type StaticDataControllerGetJobTypesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<JobType>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetJobTypesResponse = StaticDataControllerGetJobTypesResponses[keyof StaticDataControllerGetJobTypesResponses];

export type StaticDataControllerFindAllDegreeLevelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/degree-levels';
};

export type StaticDataControllerFindAllDegreeLevelsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerFindAllDegreeLevelsError = StaticDataControllerFindAllDegreeLevelsErrors[keyof StaticDataControllerFindAllDegreeLevelsErrors];

export type StaticDataControllerFindAllDegreeLevelsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<DegreeLevel>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerFindAllDegreeLevelsResponse = StaticDataControllerFindAllDegreeLevelsResponses[keyof StaticDataControllerFindAllDegreeLevelsResponses];

export type StaticDataControllerGetDegreeTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/degree-types';
};

export type StaticDataControllerGetDegreeTypesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetDegreeTypesError = StaticDataControllerGetDegreeTypesErrors[keyof StaticDataControllerGetDegreeTypesErrors];

export type StaticDataControllerGetDegreeTypesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<DegreeType>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetDegreeTypesResponse = StaticDataControllerGetDegreeTypesResponses[keyof StaticDataControllerGetDegreeTypesResponses];

export type StaticDataControllerGetSkillsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search skills by name
         */
        name?: string;
    };
    url: '/static-data/skills';
};

export type StaticDataControllerGetSkillsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetSkillsError = StaticDataControllerGetSkillsErrors[keyof StaticDataControllerGetSkillsErrors];

export type StaticDataControllerGetSkillsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Skill>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetSkillsResponse = StaticDataControllerGetSkillsResponses[keyof StaticDataControllerGetSkillsResponses];

export type StaticDataControllerGetGendersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/genders';
};

export type StaticDataControllerGetGendersErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetGendersError = StaticDataControllerGetGendersErrors[keyof StaticDataControllerGetGendersErrors];

export type StaticDataControllerGetGendersResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Gender>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetGendersResponse = StaticDataControllerGetGendersResponses[keyof StaticDataControllerGetGendersResponses];

export type StaticDataControllerGetMaritalStatusesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/marital-statuses';
};

export type StaticDataControllerGetMaritalStatusesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetMaritalStatusesError = StaticDataControllerGetMaritalStatusesErrors[keyof StaticDataControllerGetMaritalStatusesErrors];

export type StaticDataControllerGetMaritalStatusesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<MaritalStatus>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetMaritalStatusesResponse = StaticDataControllerGetMaritalStatusesResponses[keyof StaticDataControllerGetMaritalStatusesResponses];

export type StaticDataControllerGetMilitaryStatusesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/military-statuses';
};

export type StaticDataControllerGetMilitaryStatusesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetMilitaryStatusesError = StaticDataControllerGetMilitaryStatusesErrors[keyof StaticDataControllerGetMilitaryStatusesErrors];

export type StaticDataControllerGetMilitaryStatusesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<MilitaryStatus>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetMilitaryStatusesResponse = StaticDataControllerGetMilitaryStatusesResponses[keyof StaticDataControllerGetMilitaryStatusesResponses];

export type StaticDataControllerGetCareerLevelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/career-levels';
};

export type StaticDataControllerGetCareerLevelsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCareerLevelsError = StaticDataControllerGetCareerLevelsErrors[keyof StaticDataControllerGetCareerLevelsErrors];

export type StaticDataControllerGetCareerLevelsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<CareerLevel>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCareerLevelsResponse = StaticDataControllerGetCareerLevelsResponses[keyof StaticDataControllerGetCareerLevelsResponses];

export type StaticDataControllerGetCurrenciesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/currencies';
};

export type StaticDataControllerGetCurrenciesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetCurrenciesError = StaticDataControllerGetCurrenciesErrors[keyof StaticDataControllerGetCurrenciesErrors];

export type StaticDataControllerGetCurrenciesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Currency>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetCurrenciesResponse = StaticDataControllerGetCurrenciesResponses[keyof StaticDataControllerGetCurrenciesResponses];

export type StaticDataControllerGetSiteSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/site-settings';
};

export type StaticDataControllerGetSiteSettingsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetSiteSettingsError = StaticDataControllerGetSiteSettingsErrors[keyof StaticDataControllerGetSiteSettingsErrors];

export type StaticDataControllerGetSiteSettingsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: SiteSettings;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetSiteSettingsResponse = StaticDataControllerGetSiteSettingsResponses[keyof StaticDataControllerGetSiteSettingsResponses];

export type StaticDataControllerGetIndustriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search industries by name
         */
        query?: string;
    };
    url: '/static-data/industries';
};

export type StaticDataControllerGetIndustriesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetIndustriesError = StaticDataControllerGetIndustriesErrors[keyof StaticDataControllerGetIndustriesErrors];

export type StaticDataControllerGetIndustriesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Industry>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetIndustriesResponse = StaticDataControllerGetIndustriesResponses[keyof StaticDataControllerGetIndustriesResponses];

export type StaticDataControllerGetOwnershipTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/ownership-types';
};

export type StaticDataControllerGetOwnershipTypesErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetOwnershipTypesError = StaticDataControllerGetOwnershipTypesErrors[keyof StaticDataControllerGetOwnershipTypesErrors];

export type StaticDataControllerGetOwnershipTypesResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<OwnershipType>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetOwnershipTypesResponse = StaticDataControllerGetOwnershipTypesResponses[keyof StaticDataControllerGetOwnershipTypesResponses];

export type StaticDataControllerGetPlansData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/static-data/plans';
};

export type StaticDataControllerGetPlansErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type StaticDataControllerGetPlansError = StaticDataControllerGetPlansErrors[keyof StaticDataControllerGetPlansErrors];

export type StaticDataControllerGetPlansResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<Plan>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type StaticDataControllerGetPlansResponse = StaticDataControllerGetPlansResponses[keyof StaticDataControllerGetPlansResponses];

export type CompaniesControllerSearchByKeywordData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Keyword to search in company name
         */
        keyword?: string;
    };
    url: '/companies/search';
};

export type CompaniesControllerSearchByKeywordErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerSearchByKeywordError = CompaniesControllerSearchByKeywordErrors[keyof CompaniesControllerSearchByKeywordErrors];

export type CompaniesControllerSearchByKeywordResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<EmployerProfile>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CompaniesControllerSearchByKeywordResponse = CompaniesControllerSearchByKeywordResponses[keyof CompaniesControllerSearchByKeywordResponses];

export type CompaniesControllerGetCompanyJobsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: string;
        /**
         * Items per page
         */
        per_page?: string;
        /**
         * Search in company name or user name
         */
        search?: string;
    };
    url: '/companies/with-active-jobs';
};

export type CompaniesControllerGetCompanyJobsErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerGetCompanyJobsError = CompaniesControllerGetCompanyJobsErrors[keyof CompaniesControllerGetCompanyJobsErrors];

export type CompaniesControllerGetCompanyJobsResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<User>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CompaniesControllerGetCompanyJobsResponse = CompaniesControllerGetCompanyJobsResponses[keyof CompaniesControllerGetCompanyJobsResponses];

export type CompaniesControllerCreateData = {
    body: CompanyCreateDto;
    path?: never;
    query?: never;
    url: '/companies/create';
};

export type CompaniesControllerCreateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerCreateError = CompaniesControllerCreateErrors[keyof CompaniesControllerCreateErrors];

export type CompaniesControllerCreateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: EmployerProfile;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
    201: {
        [key: string]: unknown;
    };
};

export type CompaniesControllerCreateResponse = CompaniesControllerCreateResponses[keyof CompaniesControllerCreateResponses];

export type CompaniesControllerUpdateData = {
    body: CompanyUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/update/{id}';
};

export type CompaniesControllerUpdateErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerUpdateError = CompaniesControllerUpdateErrors[keyof CompaniesControllerUpdateErrors];

export type CompaniesControllerUpdateResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: EmployerProfile;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CompaniesControllerUpdateResponse = CompaniesControllerUpdateResponses[keyof CompaniesControllerUpdateResponses];

export type CompaniesControllerGetBySlugData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: never;
    url: '/companies/slug/{slug}';
};

export type CompaniesControllerGetBySlugErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerGetBySlugError = CompaniesControllerGetBySlugErrors[keyof CompaniesControllerGetBySlugErrors];

export type CompaniesControllerGetBySlugResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: EmployerProfile;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CompaniesControllerGetBySlugResponse = CompaniesControllerGetBySlugResponses[keyof CompaniesControllerGetBySlugResponses];

export type CompaniesControllerGetCompaniesWithPaginationData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * End date for filtering
         */
        date_to?: unknown;
        /**
         * Start date for filtering
         */
        date_from?: unknown;
        /**
         * Filter period
         */
        period?: 'today' | 'week' | 'this-month' | 'last-3-months' | 'yesterday' | 'last-week' | 'last-month' | 'this-year' | 'last-year';
        /**
         * Subscription plan
         */
        subscription?: unknown;
        /**
         * Company status
         */
        status?: 'email-not-verified' | 'archived' | 'approved' | 'unapproved' | 'submitted-for-approval';
        /**
         * Search in company name
         */
        search?: unknown;
        /**
         * Items per page
         */
        per_page?: unknown;
        /**
         * Page number
         */
        page?: unknown;
    };
    url: '/companies/pagination';
};

export type CompaniesControllerGetCompaniesWithPaginationErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type CompaniesControllerGetCompaniesWithPaginationError = CompaniesControllerGetCompaniesWithPaginationErrors[keyof CompaniesControllerGetCompaniesWithPaginationErrors];

export type CompaniesControllerGetCompaniesWithPaginationResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: Array<EmployerProfile>;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type CompaniesControllerGetCompaniesWithPaginationResponse = CompaniesControllerGetCompaniesWithPaginationResponses[keyof CompaniesControllerGetCompaniesWithPaginationResponses];

export type EmployerJobsControllerGetAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/employer/jobs';
};

export type EmployerJobsControllerGetAllResponses = {
    200: unknown;
};

export type EmployerJobsControllerCreateData = {
    body: CreateJobDto;
    path?: never;
    query?: never;
    url: '/employer/jobs';
};

export type EmployerJobsControllerCreateResponses = {
    201: unknown;
};

export type EmployerJobsControllerDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/employer/jobs/{id}';
};

export type EmployerJobsControllerDeleteResponses = {
    200: unknown;
};

export type EmployerJobsControllerGetOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/employer/jobs/{id}';
};

export type EmployerJobsControllerGetOneResponses = {
    200: unknown;
};

export type EmployerJobsControllerUpdateData = {
    body: UpdateJobDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/employer/jobs/{id}';
};

export type EmployerJobsControllerUpdateResponses = {
    200: unknown;
};

export type AdminControllerGetAdminDashboardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/dashboard';
};

export type AdminControllerGetAdminDashboardErrors = {
    /**
     * Bad Request Error
     */
    400: {
        status?: 'error';
        error?: string;
        errorDetails?: Array<string>;
        code?: number;
    };
    /**
     * Unauthorized Access! (For Protected Routes)
     */
    401: {
        status?: 'error';
        error?: string;
        code?: number;
    };
    /**
     * Internal Server Error
     */
    500: {
        status?: 'error';
        error?: string;
        code?: number;
    };
};

export type AdminControllerGetAdminDashboardError = AdminControllerGetAdminDashboardErrors[keyof AdminControllerGetAdminDashboardErrors];

export type AdminControllerGetAdminDashboardResponses = {
    /**
     * Success
     */
    200: {
        status?: 'success' | 'error';
        data?: AdminDashboardResponseDto;
        meta?: {
            total?: number;
            page?: number;
            limit?: number;
            count?: number;
            totalPages?: number;
        };
    };
};

export type AdminControllerGetAdminDashboardResponse = AdminControllerGetAdminDashboardResponses[keyof AdminControllerGetAdminDashboardResponses];

export type ClientOptions = {
    baseUrl: string;
};